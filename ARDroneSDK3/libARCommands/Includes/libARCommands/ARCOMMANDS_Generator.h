/*
    Copyright (C) 2014 Parrot SA
    
    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:
    * Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in
    the documentation and/or other materials provided with the
    distribution.
    * Neither the name of Parrot nor the names
    of its contributors may be used to endorse or promote products
    derived from this software without specific prior written
    permission.
    
    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
    FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
    COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
    OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
    OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
    SUCH DAMAGE.
*/
/**
 * @file libARCommands/ARCOMMANDS_Generator.h
 * @brief libARCommands generator header.
 * This file contains all declarations needed to generate commands
 * @note Autogenerated file
 **/
#ifndef _LIBARCOMMANDS_ARCOMMANDS_GENERATOR_H_
#define _LIBARCOMMANDS_ARCOMMANDS_GENERATOR_H_
#include <libARCommands/ARCOMMANDS_Types.h>
#include <inttypes.h>


/**
 * @brief Error codes for ARCOMMANDS_Generator_GenerateClassCommand functions
 */
typedef enum {
    ARCOMMANDS_GENERATOR_OK = 0, ///< No error occured
    ARCOMMANDS_GENERATOR_ERROR_BAD_ARGS, ///< At least one of the arguments is invalid
    ARCOMMANDS_GENERATOR_ERROR_NOT_ENOUGH_SPACE, ///< The given output buffer was not large enough for the command
    ARCOMMANDS_GENERATOR_ERROR, ///< Any other error
} eARCOMMANDS_GENERATOR_ERROR;


// Project common

// Command class Network

/**
 * @brief Signals the remote that the host will disconnect and close its
 * libARNetwork instance (and all threads that use libARNetwork)
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonNetworkDisconnect (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

// Command class NetworkEvent

/**
 * @brief Signals the remote that the host will disconnect and close its
 * libARNetwork instance (and all threads that use libARNetwork)
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _cause Cause of the disconnection of the product
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonNetworkEventDisconnection (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_COMMON_NETWORKEVENT_DISCONNECTION_CAUSE _cause);

// Command class Settings

/**
 * @brief Get all product settings, the product must send all settings
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonSettingsAllSettings (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Reset all settings
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonSettingsReset (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Set Product name
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _name Product name
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonSettingsProductName (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _name);

/**
 * @brief Set current Country of controller
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _code Country code with ISO 3166 format
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonSettingsCountry (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _code);

/**
 * @brief Set Auto Country Settings
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _automatic Boolean : 0 : Manual / 1 : Auto
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonSettingsAutoCountry (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _automatic);

// Command class SettingsState

/**
 * @brief State sent when all settings has been sent.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonSettingsStateAllSettingsChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief State sent when all settings has been resetting.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonSettingsStateResetChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Product name
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _name Product name
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonSettingsStateProductNameChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _name);

/**
 * @brief Product versions
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _software Product software version
 * @param _hardware Product hardware version
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonSettingsStateProductVersionChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _software, const char * _hardware);

/**
 * @brief Product serial number
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _high Serial high number (hexadecimal value)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonSettingsStateProductSerialHighChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _high);

/**
 * @brief Product serial number
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _low Serial low number (hexadecimal value)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonSettingsStateProductSerialLowChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _low);

/**
 * @brief Inform current Country set in product. (Answer to 'Country' command)
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _code Country code with ISO 3166 format, empty string means unknown country.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonSettingsStateCountryChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _code);

/**
 * @brief Inform Auto Country Settings
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _automatic Boolean : 0 : Manual / 1 : Auto
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonSettingsStateAutoCountryChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _automatic);

// Command class Common

/**
 * @brief Get all product states.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCommonAllStates (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Set current date of controller
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _date Date with ISO-8601 format
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCommonCurrentDate (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _date);

/**
 * @brief Set current time of controller
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _time Time with ISO-8601 format
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCommonCurrentTime (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _time);

/**
 * @brief Command to ask reboot to product
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCommonReboot (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

// Command class CommonState

/**
 * @brief State sent when all product states has been sent.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCommonStateAllStatesChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Battery state
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _percent Battery percentage
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCommonStateBatteryStateChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _percent);

/**
 * @brief Mass storage state list
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _mass_storage_id Mass storage id (unique)
 * @param _name Mass storage name
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCommonStateMassStorageStateListChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _mass_storage_id, const char * _name);

/**
 * @brief Mass storage info state list
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _mass_storage_id Mass storage state id (unique)
 * @param _size Mass storage size in MBytes
 * @param _used_size Mass storage used size in MBytes
 * @param _plugged Mass storage plugged (1 if mass storage is plugged, otherwise 0)
 * @param _full Mass storage full information state (1 if mass storage full, 0 otherwise).
 * @param _internal Mass storage internal type state (1 if mass storage is internal, 0 otherwise)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCommonStateMassStorageInfoStateListChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _mass_storage_id, uint32_t _size, uint32_t _used_size, uint8_t _plugged, uint8_t _full, uint8_t _internal);

/**
 * @brief Current date state
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _date Date with ISO-8601 format
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCommonStateCurrentDateChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _date);

/**
 * @brief Current time state
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _time Time with ISO-8601 format
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCommonStateCurrentTimeChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _time);

/**
 * @brief Mass storage info remaining list
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _free_space Mass storage free space in MBytes
 * @param _rec_time Mass storage record time reamining in minute
 * @param _photo_remaining Mass storage photo remaining
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCommonStateMassStorageInfoRemainingListChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint32_t _free_space, uint16_t _rec_time, uint32_t _photo_remaining);

/**
 * @brief Wifi Signal between controller and product state
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _rssi RSSI of the signal between controller and the product (in dbm)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCommonStateWifiSignalChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, int16_t _rssi);

/**
 * @brief Sensors states list
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _sensorName Sensor name
 * @param _sensorState Sensor state (1 if the sensor is OK, 0 if the sensor is NOT OK)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCommonStateSensorsStatesListChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_COMMON_COMMONSTATE_SENSORSSTATESLISTCHANGED_SENSORNAME _sensorName, uint8_t _sensorState);

// Command class OverHeat

/**
 * @brief @deprecated
 * Switch off the drone when a overheat appeared
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonOverHeatSwitchOff (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief @deprecated
 * Ventilate the drone when a overheat appeared
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonOverHeatVentilate (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

// Command class OverHeatState

/**
 * @brief Overheat temperature reached
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonOverHeatStateOverHeatChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Overheat regulation state changed
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _regulationType Type of overheat regulation : 0 for ventilation, 1 for switch off
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonOverHeatStateOverHeatRegulationChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _regulationType);

// Command class ControllerState

/**
 * @brief Tell the device when the controller application enters/leaves the piloting HUD.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _piloting 0 when the application is not in the piloting HUD, 1 when it enters the HUD.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonControllerStateIsPilotingChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _piloting);

// Command class WifiSettings

/**
 * @brief Send to product if it should use its outdoor wifi config, or indoor
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _outdoor 1 if it should use outdoor wifi settings, 0 otherwise
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonWifiSettingsOutdoorSetting (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _outdoor);

// Command class WifiSettingsState

/**
 * @brief Status of the wifi config : either indoor or outdoor
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _outdoor 1 if it should use outdoor wifi settings, 0 otherwise
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonWifiSettingsStateOutdoorSettingsChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _outdoor);

// Command class Mavlink

/**
 * @brief Start the flight plan
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _filepath flight plan file path from the mavlink ftp root
 * @param _type type of the played mavlink file
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonMavlinkStart (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _filepath, eARCOMMANDS_COMMON_MAVLINK_START_TYPE _type);

/**
 * @brief Pause the flightplan (can be restarted with a start)
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonMavlinkPause (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Stop the flightplan
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonMavlinkStop (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

// Command class MavlinkState

/**
 * @brief Playing state of a mavlink flight plan
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state State of the mavlink
 * @param _filepath flight plan file path from the mavlink ftp root
 * @param _type type of the played mavlink file
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonMavlinkStateMavlinkFilePlayingStateChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_STATE _state, const char * _filepath, eARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_TYPE _type);

/**
 * @brief FlightPlan play state error
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _error State of play error
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonMavlinkStateMavlinkPlayErrorStateChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKPLAYERRORSTATECHANGED_ERROR _error);

// Command class Calibration

/**
 * @brief Sent when a calibration of the magnetometer is asked or is aborted
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _calibrate 1 if the calibration should be started, 0 if it should be aborted
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCalibrationMagnetoCalibration (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _calibrate);

// Command class CalibrationState

/**
 * @brief Sent when the state of the magneto calibration has changed
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _xAxisCalibration State of the x axis (roll) calibration : 1 if calibration is done, 0 otherwise
 * @param _yAxisCalibration State of the y axis (pitch) calibration : 1 if calibration is done, 0 otherwise
 * @param _zAxisCalibration State of the z axis (yaw) calibration : 1 if calibration is done, 0 otherwise
 * @param _calibrationFailed 1 if calibration has failed, 0 otherwise. If this arg is 1, consider all previous arg as 0
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCalibrationStateMagnetoCalibrationStateChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _xAxisCalibration, uint8_t _yAxisCalibration, uint8_t _zAxisCalibration, uint8_t _calibrationFailed);

/**
 * @brief Status of the calibration requirement
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _required 1 if calibration is required, 0 if current calibration is still valid
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCalibrationStateMagnetoCalibrationRequiredState (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _required);

/**
 * @brief Event sent by a product to inform about the axis to calibrate
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _axis The axis to calibrate
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCalibrationStateMagnetoCalibrationAxisToCalibrateChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONAXISTOCALIBRATECHANGED_AXIS _axis);

/**
 * @brief Status of the calibration process
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _started 1 if calibration has started, 0 otherwise
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCalibrationStateMagnetoCalibrationStartedChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _started);

// Command class CameraSettingsState

/**
 * @brief Status of the camera settings
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _fov Value of the camera horizontal fov (in degree)
 * @param _panMax Value of max pan (right pan) (in degree)
 * @param _panMin Value of min pan (left pan) (in degree)
 * @param _tiltMax Value of max tilt (top tilt) (in degree)
 * @param _tiltMin Value of min tilt (bottom tilt) (in degree)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCameraSettingsStateCameraSettingsChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _fov, float _panMax, float _panMin, float _tiltMax, float _tiltMin);

// Command class GPS

/**
 * @brief Set the controller position for a run. This command is used by all non gps products. Watch out, this command cannot be used with BLE products
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _latitude Controller latitude in decimal degrees
 * @param _longitude Controller longitude in decimal degrees
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonGPSControllerPositionForRun (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, double _latitude, double _longitude);

// Command class FlightPlanState

/**
 * @brief State of availability to run a flight plan file
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _AvailabilityState Running a flightPlan file is available (1 running a flightPlan file is available, otherwise 0)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonFlightPlanStateAvailabilityStateChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _AvailabilityState);

/**
 * @brief List of state of drone flightPlan components
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _component Drone FlightPlan component id (unique)
 * @param _State State of the FlightPlan component (1 FlightPlan component OK, otherwise 0)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonFlightPlanStateComponentStateListChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_COMMON_FLIGHTPLANSTATE_COMPONENTSTATELISTCHANGED_COMPONENT _component, uint8_t _State);

// Command class FlightPlanEvent

/**
 * @brief Event of flight plan start error
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonFlightPlanEventStartingErrorEvent (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Bridle speed of the drone
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonFlightPlanEventSpeedBridleEvent (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

// Command class ARLibsVersionsState

/**
 * @brief Controller libARCommands version
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _version version of libARCommands ("1.2.3.4" format)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonARLibsVersionsStateControllerLibARCommandsVersion (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _version);

/**
 * @brief SkyController libARCommands version
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _version version of libARCommands ("1.2.3.4" format)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonARLibsVersionsStateSkyControllerLibARCommandsVersion (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _version);

/**
 * @brief Device libARCommands version
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _version version of libARCommands ("1.2.3.4" format)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonARLibsVersionsStateDeviceLibARCommandsVersion (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _version);



#endif /* _LIBARCOMMANDS_ARCOMMANDS_GENERATOR_H_ */
