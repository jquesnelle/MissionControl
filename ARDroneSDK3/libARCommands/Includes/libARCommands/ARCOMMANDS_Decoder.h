/*
    Copyright (C) 2014 Parrot SA
    
    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:
    * Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in
    the documentation and/or other materials provided with the
    distribution.
    * Neither the name of Parrot nor the names
    of its contributors may be used to endorse or promote products
    derived from this software without specific prior written
    permission.
    
    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
    FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
    COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
    OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
    OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
    SUCH DAMAGE.
*/
/**
 * @file libARCommands/ARCOMMANDS_Decoder.h
 * @brief libARCommands decoder header.
 * This file contains all declarations needed to decode commands
 * @note Autogenerated file
 **/
#ifndef _LIBARCOMMANDS_ARCOMMANDS_DECODER_H_
#define _LIBARCOMMANDS_ARCOMMANDS_DECODER_H_
#include <libARCommands/ARCOMMANDS_Types.h>
#include <inttypes.h>


/**
 * @brief Error codes for ARCOMMANDS_Decoder_DecodeBuffer function
 */
typedef enum {
    ARCOMMANDS_DECODER_OK = 0, ///< No error occured
    ARCOMMANDS_DECODER_ERROR_NO_CALLBACK, ///< No error, but no callback was set (so the call had no effect)
    ARCOMMANDS_DECODER_ERROR_UNKNOWN_COMMAND, ///< The command buffer contained an unknown command
    ARCOMMANDS_DECODER_ERROR_NOT_ENOUGH_DATA, ///< The command buffer did not contain enough data for the specified command
    ARCOMMANDS_DECODER_ERROR_NOT_ENOUGH_SPACE, ///< The string buffer was not big enough for the command description
    ARCOMMANDS_DECODER_ERROR, ///< Any other error
} eARCOMMANDS_DECODER_ERROR;

/**
 * @brief Decode a comand buffer
 * On success, the callback set for the command will be called in the current thread.
 * @param buffer the command buffer to decode
 * @param buffLen the length of the command buffer
 * @return ARCOMMANDS_DECODER_OK on success, any error code otherwise
 */
eARCOMMANDS_DECODER_ERROR
ARCOMMANDS_Decoder_DecodeBuffer (uint8_t *buffer, int32_t buffLen);


/**
 * @brief Describe a comand buffer
 * @param buffer the command buffer to decode
 * @param buffLen the length of the command buffer
 * @param resString the string pointer in which the description will be stored
 * @param stringLen the length of the string pointer
 * @return ARCOMMANDS_DECODER_OK on success, any error code otherwise
 */
eARCOMMANDS_DECODER_ERROR
ARCOMMANDS_Decoder_DescribeBuffer (uint8_t *buffer, int32_t buffLen, char *resString, int32_t stringLen);

// Project common

// Command class Network

/**
 * @brief callback type for the command common.Network.Disconnect
 */
typedef void (*ARCOMMANDS_Decoder_CommonNetworkDisconnectCallback_t) (void *custom);
/**
 * @brief callback setter for the command common.Network.Disconnect
 * @param callback new callback for the command common.Network.Disconnect
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonNetworkDisconnectCallback (ARCOMMANDS_Decoder_CommonNetworkDisconnectCallback_t callback, void *custom);

// Command class NetworkEvent

/**
 * @brief callback type for the command common.NetworkEvent.Disconnection
 */
typedef void (*ARCOMMANDS_Decoder_CommonNetworkEventDisconnectionCallback_t) (eARCOMMANDS_COMMON_NETWORKEVENT_DISCONNECTION_CAUSE cause, void *custom);
/**
 * @brief callback setter for the command common.NetworkEvent.Disconnection
 * @param callback new callback for the command common.NetworkEvent.Disconnection
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonNetworkEventDisconnectionCallback (ARCOMMANDS_Decoder_CommonNetworkEventDisconnectionCallback_t callback, void *custom);

// Command class Settings

/**
 * @brief callback type for the command common.Settings.AllSettings
 */
typedef void (*ARCOMMANDS_Decoder_CommonSettingsAllSettingsCallback_t) (void *custom);
/**
 * @brief callback setter for the command common.Settings.AllSettings
 * @param callback new callback for the command common.Settings.AllSettings
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonSettingsAllSettingsCallback (ARCOMMANDS_Decoder_CommonSettingsAllSettingsCallback_t callback, void *custom);

/**
 * @brief callback type for the command common.Settings.Reset
 */
typedef void (*ARCOMMANDS_Decoder_CommonSettingsResetCallback_t) (void *custom);
/**
 * @brief callback setter for the command common.Settings.Reset
 * @param callback new callback for the command common.Settings.Reset
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonSettingsResetCallback (ARCOMMANDS_Decoder_CommonSettingsResetCallback_t callback, void *custom);

/**
 * @brief callback type for the command common.Settings.ProductName
 */
typedef void (*ARCOMMANDS_Decoder_CommonSettingsProductNameCallback_t) (char * name, void *custom);
/**
 * @brief callback setter for the command common.Settings.ProductName
 * @param callback new callback for the command common.Settings.ProductName
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonSettingsProductNameCallback (ARCOMMANDS_Decoder_CommonSettingsProductNameCallback_t callback, void *custom);

/**
 * @brief callback type for the command common.Settings.Country
 */
typedef void (*ARCOMMANDS_Decoder_CommonSettingsCountryCallback_t) (char * code, void *custom);
/**
 * @brief callback setter for the command common.Settings.Country
 * @param callback new callback for the command common.Settings.Country
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonSettingsCountryCallback (ARCOMMANDS_Decoder_CommonSettingsCountryCallback_t callback, void *custom);

/**
 * @brief callback type for the command common.Settings.AutoCountry
 */
typedef void (*ARCOMMANDS_Decoder_CommonSettingsAutoCountryCallback_t) (uint8_t automatic, void *custom);
/**
 * @brief callback setter for the command common.Settings.AutoCountry
 * @param callback new callback for the command common.Settings.AutoCountry
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonSettingsAutoCountryCallback (ARCOMMANDS_Decoder_CommonSettingsAutoCountryCallback_t callback, void *custom);

// Command class SettingsState

/**
 * @brief callback type for the command common.SettingsState.AllSettingsChanged
 */
typedef void (*ARCOMMANDS_Decoder_CommonSettingsStateAllSettingsChangedCallback_t) (void *custom);
/**
 * @brief callback setter for the command common.SettingsState.AllSettingsChanged
 * @param callback new callback for the command common.SettingsState.AllSettingsChanged
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonSettingsStateAllSettingsChangedCallback (ARCOMMANDS_Decoder_CommonSettingsStateAllSettingsChangedCallback_t callback, void *custom);

/**
 * @brief callback type for the command common.SettingsState.ResetChanged
 */
typedef void (*ARCOMMANDS_Decoder_CommonSettingsStateResetChangedCallback_t) (void *custom);
/**
 * @brief callback setter for the command common.SettingsState.ResetChanged
 * @param callback new callback for the command common.SettingsState.ResetChanged
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonSettingsStateResetChangedCallback (ARCOMMANDS_Decoder_CommonSettingsStateResetChangedCallback_t callback, void *custom);

/**
 * @brief callback type for the command common.SettingsState.ProductNameChanged
 */
typedef void (*ARCOMMANDS_Decoder_CommonSettingsStateProductNameChangedCallback_t) (char * name, void *custom);
/**
 * @brief callback setter for the command common.SettingsState.ProductNameChanged
 * @param callback new callback for the command common.SettingsState.ProductNameChanged
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonSettingsStateProductNameChangedCallback (ARCOMMANDS_Decoder_CommonSettingsStateProductNameChangedCallback_t callback, void *custom);

/**
 * @brief callback type for the command common.SettingsState.ProductVersionChanged
 */
typedef void (*ARCOMMANDS_Decoder_CommonSettingsStateProductVersionChangedCallback_t) (char * software, char * hardware, void *custom);
/**
 * @brief callback setter for the command common.SettingsState.ProductVersionChanged
 * @param callback new callback for the command common.SettingsState.ProductVersionChanged
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonSettingsStateProductVersionChangedCallback (ARCOMMANDS_Decoder_CommonSettingsStateProductVersionChangedCallback_t callback, void *custom);

/**
 * @brief callback type for the command common.SettingsState.ProductSerialHighChanged
 */
typedef void (*ARCOMMANDS_Decoder_CommonSettingsStateProductSerialHighChangedCallback_t) (char * high, void *custom);
/**
 * @brief callback setter for the command common.SettingsState.ProductSerialHighChanged
 * @param callback new callback for the command common.SettingsState.ProductSerialHighChanged
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonSettingsStateProductSerialHighChangedCallback (ARCOMMANDS_Decoder_CommonSettingsStateProductSerialHighChangedCallback_t callback, void *custom);

/**
 * @brief callback type for the command common.SettingsState.ProductSerialLowChanged
 */
typedef void (*ARCOMMANDS_Decoder_CommonSettingsStateProductSerialLowChangedCallback_t) (char * low, void *custom);
/**
 * @brief callback setter for the command common.SettingsState.ProductSerialLowChanged
 * @param callback new callback for the command common.SettingsState.ProductSerialLowChanged
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonSettingsStateProductSerialLowChangedCallback (ARCOMMANDS_Decoder_CommonSettingsStateProductSerialLowChangedCallback_t callback, void *custom);

/**
 * @brief callback type for the command common.SettingsState.CountryChanged
 */
typedef void (*ARCOMMANDS_Decoder_CommonSettingsStateCountryChangedCallback_t) (char * code, void *custom);
/**
 * @brief callback setter for the command common.SettingsState.CountryChanged
 * @param callback new callback for the command common.SettingsState.CountryChanged
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonSettingsStateCountryChangedCallback (ARCOMMANDS_Decoder_CommonSettingsStateCountryChangedCallback_t callback, void *custom);

/**
 * @brief callback type for the command common.SettingsState.AutoCountryChanged
 */
typedef void (*ARCOMMANDS_Decoder_CommonSettingsStateAutoCountryChangedCallback_t) (uint8_t automatic, void *custom);
/**
 * @brief callback setter for the command common.SettingsState.AutoCountryChanged
 * @param callback new callback for the command common.SettingsState.AutoCountryChanged
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonSettingsStateAutoCountryChangedCallback (ARCOMMANDS_Decoder_CommonSettingsStateAutoCountryChangedCallback_t callback, void *custom);

// Command class Common

/**
 * @brief callback type for the command common.Common.AllStates
 */
typedef void (*ARCOMMANDS_Decoder_CommonCommonAllStatesCallback_t) (void *custom);
/**
 * @brief callback setter for the command common.Common.AllStates
 * @param callback new callback for the command common.Common.AllStates
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonCommonAllStatesCallback (ARCOMMANDS_Decoder_CommonCommonAllStatesCallback_t callback, void *custom);

/**
 * @brief callback type for the command common.Common.CurrentDate
 */
typedef void (*ARCOMMANDS_Decoder_CommonCommonCurrentDateCallback_t) (char * date, void *custom);
/**
 * @brief callback setter for the command common.Common.CurrentDate
 * @param callback new callback for the command common.Common.CurrentDate
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonCommonCurrentDateCallback (ARCOMMANDS_Decoder_CommonCommonCurrentDateCallback_t callback, void *custom);

/**
 * @brief callback type for the command common.Common.CurrentTime
 */
typedef void (*ARCOMMANDS_Decoder_CommonCommonCurrentTimeCallback_t) (char * time, void *custom);
/**
 * @brief callback setter for the command common.Common.CurrentTime
 * @param callback new callback for the command common.Common.CurrentTime
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonCommonCurrentTimeCallback (ARCOMMANDS_Decoder_CommonCommonCurrentTimeCallback_t callback, void *custom);

/**
 * @brief callback type for the command common.Common.Reboot
 */
typedef void (*ARCOMMANDS_Decoder_CommonCommonRebootCallback_t) (void *custom);
/**
 * @brief callback setter for the command common.Common.Reboot
 * @param callback new callback for the command common.Common.Reboot
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonCommonRebootCallback (ARCOMMANDS_Decoder_CommonCommonRebootCallback_t callback, void *custom);

// Command class CommonState

/**
 * @brief callback type for the command common.CommonState.AllStatesChanged
 */
typedef void (*ARCOMMANDS_Decoder_CommonCommonStateAllStatesChangedCallback_t) (void *custom);
/**
 * @brief callback setter for the command common.CommonState.AllStatesChanged
 * @param callback new callback for the command common.CommonState.AllStatesChanged
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonCommonStateAllStatesChangedCallback (ARCOMMANDS_Decoder_CommonCommonStateAllStatesChangedCallback_t callback, void *custom);

/**
 * @brief callback type for the command common.CommonState.BatteryStateChanged
 */
typedef void (*ARCOMMANDS_Decoder_CommonCommonStateBatteryStateChangedCallback_t) (uint8_t percent, void *custom);
/**
 * @brief callback setter for the command common.CommonState.BatteryStateChanged
 * @param callback new callback for the command common.CommonState.BatteryStateChanged
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonCommonStateBatteryStateChangedCallback (ARCOMMANDS_Decoder_CommonCommonStateBatteryStateChangedCallback_t callback, void *custom);

/**
 * @brief callback type for the command common.CommonState.MassStorageStateListChanged
 */
typedef void (*ARCOMMANDS_Decoder_CommonCommonStateMassStorageStateListChangedCallback_t) (uint8_t mass_storage_id, char * name, void *custom);
/**
 * @brief callback setter for the command common.CommonState.MassStorageStateListChanged
 * @param callback new callback for the command common.CommonState.MassStorageStateListChanged
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonCommonStateMassStorageStateListChangedCallback (ARCOMMANDS_Decoder_CommonCommonStateMassStorageStateListChangedCallback_t callback, void *custom);

/**
 * @brief callback type for the command common.CommonState.MassStorageInfoStateListChanged
 */
typedef void (*ARCOMMANDS_Decoder_CommonCommonStateMassStorageInfoStateListChangedCallback_t) (uint8_t mass_storage_id, uint32_t size, uint32_t used_size, uint8_t plugged, uint8_t full, uint8_t internal, void *custom);
/**
 * @brief callback setter for the command common.CommonState.MassStorageInfoStateListChanged
 * @param callback new callback for the command common.CommonState.MassStorageInfoStateListChanged
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonCommonStateMassStorageInfoStateListChangedCallback (ARCOMMANDS_Decoder_CommonCommonStateMassStorageInfoStateListChangedCallback_t callback, void *custom);

/**
 * @brief callback type for the command common.CommonState.CurrentDateChanged
 */
typedef void (*ARCOMMANDS_Decoder_CommonCommonStateCurrentDateChangedCallback_t) (char * date, void *custom);
/**
 * @brief callback setter for the command common.CommonState.CurrentDateChanged
 * @param callback new callback for the command common.CommonState.CurrentDateChanged
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonCommonStateCurrentDateChangedCallback (ARCOMMANDS_Decoder_CommonCommonStateCurrentDateChangedCallback_t callback, void *custom);

/**
 * @brief callback type for the command common.CommonState.CurrentTimeChanged
 */
typedef void (*ARCOMMANDS_Decoder_CommonCommonStateCurrentTimeChangedCallback_t) (char * time, void *custom);
/**
 * @brief callback setter for the command common.CommonState.CurrentTimeChanged
 * @param callback new callback for the command common.CommonState.CurrentTimeChanged
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonCommonStateCurrentTimeChangedCallback (ARCOMMANDS_Decoder_CommonCommonStateCurrentTimeChangedCallback_t callback, void *custom);

/**
 * @brief callback type for the command common.CommonState.MassStorageInfoRemainingListChanged
 */
typedef void (*ARCOMMANDS_Decoder_CommonCommonStateMassStorageInfoRemainingListChangedCallback_t) (uint32_t free_space, uint16_t rec_time, uint32_t photo_remaining, void *custom);
/**
 * @brief callback setter for the command common.CommonState.MassStorageInfoRemainingListChanged
 * @param callback new callback for the command common.CommonState.MassStorageInfoRemainingListChanged
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonCommonStateMassStorageInfoRemainingListChangedCallback (ARCOMMANDS_Decoder_CommonCommonStateMassStorageInfoRemainingListChangedCallback_t callback, void *custom);

/**
 * @brief callback type for the command common.CommonState.WifiSignalChanged
 */
typedef void (*ARCOMMANDS_Decoder_CommonCommonStateWifiSignalChangedCallback_t) (int16_t rssi, void *custom);
/**
 * @brief callback setter for the command common.CommonState.WifiSignalChanged
 * @param callback new callback for the command common.CommonState.WifiSignalChanged
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonCommonStateWifiSignalChangedCallback (ARCOMMANDS_Decoder_CommonCommonStateWifiSignalChangedCallback_t callback, void *custom);

/**
 * @brief callback type for the command common.CommonState.SensorsStatesListChanged
 */
typedef void (*ARCOMMANDS_Decoder_CommonCommonStateSensorsStatesListChangedCallback_t) (eARCOMMANDS_COMMON_COMMONSTATE_SENSORSSTATESLISTCHANGED_SENSORNAME sensorName, uint8_t sensorState, void *custom);
/**
 * @brief callback setter for the command common.CommonState.SensorsStatesListChanged
 * @param callback new callback for the command common.CommonState.SensorsStatesListChanged
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonCommonStateSensorsStatesListChangedCallback (ARCOMMANDS_Decoder_CommonCommonStateSensorsStatesListChangedCallback_t callback, void *custom);

// Command class OverHeat

/**
 * @brief callback type for the command common.OverHeat.SwitchOff
 */
typedef void (*ARCOMMANDS_Decoder_CommonOverHeatSwitchOffCallback_t) (void *custom);
/**
 * @brief callback setter for the command common.OverHeat.SwitchOff
 * @param callback new callback for the command common.OverHeat.SwitchOff
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonOverHeatSwitchOffCallback (ARCOMMANDS_Decoder_CommonOverHeatSwitchOffCallback_t callback, void *custom);

/**
 * @brief callback type for the command common.OverHeat.Ventilate
 */
typedef void (*ARCOMMANDS_Decoder_CommonOverHeatVentilateCallback_t) (void *custom);
/**
 * @brief callback setter for the command common.OverHeat.Ventilate
 * @param callback new callback for the command common.OverHeat.Ventilate
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonOverHeatVentilateCallback (ARCOMMANDS_Decoder_CommonOverHeatVentilateCallback_t callback, void *custom);

// Command class OverHeatState

/**
 * @brief callback type for the command common.OverHeatState.OverHeatChanged
 */
typedef void (*ARCOMMANDS_Decoder_CommonOverHeatStateOverHeatChangedCallback_t) (void *custom);
/**
 * @brief callback setter for the command common.OverHeatState.OverHeatChanged
 * @param callback new callback for the command common.OverHeatState.OverHeatChanged
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonOverHeatStateOverHeatChangedCallback (ARCOMMANDS_Decoder_CommonOverHeatStateOverHeatChangedCallback_t callback, void *custom);

/**
 * @brief callback type for the command common.OverHeatState.OverHeatRegulationChanged
 */
typedef void (*ARCOMMANDS_Decoder_CommonOverHeatStateOverHeatRegulationChangedCallback_t) (uint8_t regulationType, void *custom);
/**
 * @brief callback setter for the command common.OverHeatState.OverHeatRegulationChanged
 * @param callback new callback for the command common.OverHeatState.OverHeatRegulationChanged
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonOverHeatStateOverHeatRegulationChangedCallback (ARCOMMANDS_Decoder_CommonOverHeatStateOverHeatRegulationChangedCallback_t callback, void *custom);

// Command class ControllerState

/**
 * @brief callback type for the command common.ControllerState.isPilotingChanged
 */
typedef void (*ARCOMMANDS_Decoder_CommonControllerStateIsPilotingChangedCallback_t) (uint8_t piloting, void *custom);
/**
 * @brief callback setter for the command common.ControllerState.isPilotingChanged
 * @param callback new callback for the command common.ControllerState.isPilotingChanged
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonControllerStateIsPilotingChangedCallback (ARCOMMANDS_Decoder_CommonControllerStateIsPilotingChangedCallback_t callback, void *custom);

// Command class WifiSettings

/**
 * @brief callback type for the command common.WifiSettings.OutdoorSetting
 */
typedef void (*ARCOMMANDS_Decoder_CommonWifiSettingsOutdoorSettingCallback_t) (uint8_t outdoor, void *custom);
/**
 * @brief callback setter for the command common.WifiSettings.OutdoorSetting
 * @param callback new callback for the command common.WifiSettings.OutdoorSetting
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonWifiSettingsOutdoorSettingCallback (ARCOMMANDS_Decoder_CommonWifiSettingsOutdoorSettingCallback_t callback, void *custom);

// Command class WifiSettingsState

/**
 * @brief callback type for the command common.WifiSettingsState.outdoorSettingsChanged
 */
typedef void (*ARCOMMANDS_Decoder_CommonWifiSettingsStateOutdoorSettingsChangedCallback_t) (uint8_t outdoor, void *custom);
/**
 * @brief callback setter for the command common.WifiSettingsState.outdoorSettingsChanged
 * @param callback new callback for the command common.WifiSettingsState.outdoorSettingsChanged
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonWifiSettingsStateOutdoorSettingsChangedCallback (ARCOMMANDS_Decoder_CommonWifiSettingsStateOutdoorSettingsChangedCallback_t callback, void *custom);

// Command class Mavlink

/**
 * @brief callback type for the command common.Mavlink.Start
 */
typedef void (*ARCOMMANDS_Decoder_CommonMavlinkStartCallback_t) (char * filepath, eARCOMMANDS_COMMON_MAVLINK_START_TYPE type, void *custom);
/**
 * @brief callback setter for the command common.Mavlink.Start
 * @param callback new callback for the command common.Mavlink.Start
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonMavlinkStartCallback (ARCOMMANDS_Decoder_CommonMavlinkStartCallback_t callback, void *custom);

/**
 * @brief callback type for the command common.Mavlink.Pause
 */
typedef void (*ARCOMMANDS_Decoder_CommonMavlinkPauseCallback_t) (void *custom);
/**
 * @brief callback setter for the command common.Mavlink.Pause
 * @param callback new callback for the command common.Mavlink.Pause
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonMavlinkPauseCallback (ARCOMMANDS_Decoder_CommonMavlinkPauseCallback_t callback, void *custom);

/**
 * @brief callback type for the command common.Mavlink.Stop
 */
typedef void (*ARCOMMANDS_Decoder_CommonMavlinkStopCallback_t) (void *custom);
/**
 * @brief callback setter for the command common.Mavlink.Stop
 * @param callback new callback for the command common.Mavlink.Stop
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonMavlinkStopCallback (ARCOMMANDS_Decoder_CommonMavlinkStopCallback_t callback, void *custom);

// Command class MavlinkState

/**
 * @brief callback type for the command common.MavlinkState.MavlinkFilePlayingStateChanged
 */
typedef void (*ARCOMMANDS_Decoder_CommonMavlinkStateMavlinkFilePlayingStateChangedCallback_t) (eARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_STATE state, char * filepath, eARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_TYPE type, void *custom);
/**
 * @brief callback setter for the command common.MavlinkState.MavlinkFilePlayingStateChanged
 * @param callback new callback for the command common.MavlinkState.MavlinkFilePlayingStateChanged
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonMavlinkStateMavlinkFilePlayingStateChangedCallback (ARCOMMANDS_Decoder_CommonMavlinkStateMavlinkFilePlayingStateChangedCallback_t callback, void *custom);

/**
 * @brief callback type for the command common.MavlinkState.MavlinkPlayErrorStateChanged
 */
typedef void (*ARCOMMANDS_Decoder_CommonMavlinkStateMavlinkPlayErrorStateChangedCallback_t) (eARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKPLAYERRORSTATECHANGED_ERROR error, void *custom);
/**
 * @brief callback setter for the command common.MavlinkState.MavlinkPlayErrorStateChanged
 * @param callback new callback for the command common.MavlinkState.MavlinkPlayErrorStateChanged
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonMavlinkStateMavlinkPlayErrorStateChangedCallback (ARCOMMANDS_Decoder_CommonMavlinkStateMavlinkPlayErrorStateChangedCallback_t callback, void *custom);

// Command class Calibration

/**
 * @brief callback type for the command common.Calibration.MagnetoCalibration
 */
typedef void (*ARCOMMANDS_Decoder_CommonCalibrationMagnetoCalibrationCallback_t) (uint8_t calibrate, void *custom);
/**
 * @brief callback setter for the command common.Calibration.MagnetoCalibration
 * @param callback new callback for the command common.Calibration.MagnetoCalibration
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonCalibrationMagnetoCalibrationCallback (ARCOMMANDS_Decoder_CommonCalibrationMagnetoCalibrationCallback_t callback, void *custom);

// Command class CalibrationState

/**
 * @brief callback type for the command common.CalibrationState.MagnetoCalibrationStateChanged
 */
typedef void (*ARCOMMANDS_Decoder_CommonCalibrationStateMagnetoCalibrationStateChangedCallback_t) (uint8_t xAxisCalibration, uint8_t yAxisCalibration, uint8_t zAxisCalibration, uint8_t calibrationFailed, void *custom);
/**
 * @brief callback setter for the command common.CalibrationState.MagnetoCalibrationStateChanged
 * @param callback new callback for the command common.CalibrationState.MagnetoCalibrationStateChanged
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonCalibrationStateMagnetoCalibrationStateChangedCallback (ARCOMMANDS_Decoder_CommonCalibrationStateMagnetoCalibrationStateChangedCallback_t callback, void *custom);

/**
 * @brief callback type for the command common.CalibrationState.MagnetoCalibrationRequiredState
 */
typedef void (*ARCOMMANDS_Decoder_CommonCalibrationStateMagnetoCalibrationRequiredStateCallback_t) (uint8_t required, void *custom);
/**
 * @brief callback setter for the command common.CalibrationState.MagnetoCalibrationRequiredState
 * @param callback new callback for the command common.CalibrationState.MagnetoCalibrationRequiredState
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonCalibrationStateMagnetoCalibrationRequiredStateCallback (ARCOMMANDS_Decoder_CommonCalibrationStateMagnetoCalibrationRequiredStateCallback_t callback, void *custom);

/**
 * @brief callback type for the command common.CalibrationState.MagnetoCalibrationAxisToCalibrateChanged
 */
typedef void (*ARCOMMANDS_Decoder_CommonCalibrationStateMagnetoCalibrationAxisToCalibrateChangedCallback_t) (eARCOMMANDS_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONAXISTOCALIBRATECHANGED_AXIS axis, void *custom);
/**
 * @brief callback setter for the command common.CalibrationState.MagnetoCalibrationAxisToCalibrateChanged
 * @param callback new callback for the command common.CalibrationState.MagnetoCalibrationAxisToCalibrateChanged
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonCalibrationStateMagnetoCalibrationAxisToCalibrateChangedCallback (ARCOMMANDS_Decoder_CommonCalibrationStateMagnetoCalibrationAxisToCalibrateChangedCallback_t callback, void *custom);

/**
 * @brief callback type for the command common.CalibrationState.MagnetoCalibrationStartedChanged
 */
typedef void (*ARCOMMANDS_Decoder_CommonCalibrationStateMagnetoCalibrationStartedChangedCallback_t) (uint8_t started, void *custom);
/**
 * @brief callback setter for the command common.CalibrationState.MagnetoCalibrationStartedChanged
 * @param callback new callback for the command common.CalibrationState.MagnetoCalibrationStartedChanged
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonCalibrationStateMagnetoCalibrationStartedChangedCallback (ARCOMMANDS_Decoder_CommonCalibrationStateMagnetoCalibrationStartedChangedCallback_t callback, void *custom);

// Command class CameraSettingsState

/**
 * @brief callback type for the command common.CameraSettingsState.CameraSettingsChanged
 */
typedef void (*ARCOMMANDS_Decoder_CommonCameraSettingsStateCameraSettingsChangedCallback_t) (float fov, float panMax, float panMin, float tiltMax, float tiltMin, void *custom);
/**
 * @brief callback setter for the command common.CameraSettingsState.CameraSettingsChanged
 * @param callback new callback for the command common.CameraSettingsState.CameraSettingsChanged
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonCameraSettingsStateCameraSettingsChangedCallback (ARCOMMANDS_Decoder_CommonCameraSettingsStateCameraSettingsChangedCallback_t callback, void *custom);

// Command class GPS

/**
 * @brief callback type for the command common.GPS.ControllerPositionForRun
 */
typedef void (*ARCOMMANDS_Decoder_CommonGPSControllerPositionForRunCallback_t) (double latitude, double longitude, void *custom);
/**
 * @brief callback setter for the command common.GPS.ControllerPositionForRun
 * @param callback new callback for the command common.GPS.ControllerPositionForRun
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonGPSControllerPositionForRunCallback (ARCOMMANDS_Decoder_CommonGPSControllerPositionForRunCallback_t callback, void *custom);

// Command class FlightPlanState

/**
 * @brief callback type for the command common.FlightPlanState.AvailabilityStateChanged
 */
typedef void (*ARCOMMANDS_Decoder_CommonFlightPlanStateAvailabilityStateChangedCallback_t) (uint8_t AvailabilityState, void *custom);
/**
 * @brief callback setter for the command common.FlightPlanState.AvailabilityStateChanged
 * @param callback new callback for the command common.FlightPlanState.AvailabilityStateChanged
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonFlightPlanStateAvailabilityStateChangedCallback (ARCOMMANDS_Decoder_CommonFlightPlanStateAvailabilityStateChangedCallback_t callback, void *custom);

/**
 * @brief callback type for the command common.FlightPlanState.ComponentStateListChanged
 */
typedef void (*ARCOMMANDS_Decoder_CommonFlightPlanStateComponentStateListChangedCallback_t) (eARCOMMANDS_COMMON_FLIGHTPLANSTATE_COMPONENTSTATELISTCHANGED_COMPONENT component, uint8_t State, void *custom);
/**
 * @brief callback setter for the command common.FlightPlanState.ComponentStateListChanged
 * @param callback new callback for the command common.FlightPlanState.ComponentStateListChanged
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonFlightPlanStateComponentStateListChangedCallback (ARCOMMANDS_Decoder_CommonFlightPlanStateComponentStateListChangedCallback_t callback, void *custom);

// Command class FlightPlanEvent

/**
 * @brief callback type for the command common.FlightPlanEvent.StartingErrorEvent
 */
typedef void (*ARCOMMANDS_Decoder_CommonFlightPlanEventStartingErrorEventCallback_t) (void *custom);
/**
 * @brief callback setter for the command common.FlightPlanEvent.StartingErrorEvent
 * @param callback new callback for the command common.FlightPlanEvent.StartingErrorEvent
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonFlightPlanEventStartingErrorEventCallback (ARCOMMANDS_Decoder_CommonFlightPlanEventStartingErrorEventCallback_t callback, void *custom);

/**
 * @brief callback type for the command common.FlightPlanEvent.SpeedBridleEvent
 */
typedef void (*ARCOMMANDS_Decoder_CommonFlightPlanEventSpeedBridleEventCallback_t) (void *custom);
/**
 * @brief callback setter for the command common.FlightPlanEvent.SpeedBridleEvent
 * @param callback new callback for the command common.FlightPlanEvent.SpeedBridleEvent
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonFlightPlanEventSpeedBridleEventCallback (ARCOMMANDS_Decoder_CommonFlightPlanEventSpeedBridleEventCallback_t callback, void *custom);

// Command class ARLibsVersionsState

/**
 * @brief callback type for the command common.ARLibsVersionsState.ControllerLibARCommandsVersion
 */
typedef void (*ARCOMMANDS_Decoder_CommonARLibsVersionsStateControllerLibARCommandsVersionCallback_t) (char * version, void *custom);
/**
 * @brief callback setter for the command common.ARLibsVersionsState.ControllerLibARCommandsVersion
 * @param callback new callback for the command common.ARLibsVersionsState.ControllerLibARCommandsVersion
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonARLibsVersionsStateControllerLibARCommandsVersionCallback (ARCOMMANDS_Decoder_CommonARLibsVersionsStateControllerLibARCommandsVersionCallback_t callback, void *custom);

/**
 * @brief callback type for the command common.ARLibsVersionsState.SkyControllerLibARCommandsVersion
 */
typedef void (*ARCOMMANDS_Decoder_CommonARLibsVersionsStateSkyControllerLibARCommandsVersionCallback_t) (char * version, void *custom);
/**
 * @brief callback setter for the command common.ARLibsVersionsState.SkyControllerLibARCommandsVersion
 * @param callback new callback for the command common.ARLibsVersionsState.SkyControllerLibARCommandsVersion
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonARLibsVersionsStateSkyControllerLibARCommandsVersionCallback (ARCOMMANDS_Decoder_CommonARLibsVersionsStateSkyControllerLibARCommandsVersionCallback_t callback, void *custom);

/**
 * @brief callback type for the command common.ARLibsVersionsState.DeviceLibARCommandsVersion
 */
typedef void (*ARCOMMANDS_Decoder_CommonARLibsVersionsStateDeviceLibARCommandsVersionCallback_t) (char * version, void *custom);
/**
 * @brief callback setter for the command common.ARLibsVersionsState.DeviceLibARCommandsVersion
 * @param callback new callback for the command common.ARLibsVersionsState.DeviceLibARCommandsVersion
 * @param custom pointer that will be passed to all calls to the callback
 */
void ARCOMMANDS_Decoder_SetCommonARLibsVersionsStateDeviceLibARCommandsVersionCallback (ARCOMMANDS_Decoder_CommonARLibsVersionsStateDeviceLibARCommandsVersionCallback_t callback, void *custom);


#endif /* _LIBARCOMMANDS_ARCOMMANDS_DECODER_H_ */
