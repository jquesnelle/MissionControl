/**********************************************************
 *            AUTOGENERATED FILE                          *
 *             DO NOT MODIFY IT                           *
 *                                                        *
 * To add new commands :                                  *
 *  - Modify ../Xml/commands.xml file                     *
 *  - Re-run generateFeatureControllers.py script         *
 *                                                        *
 **********************************************************/

/**
* @file ARCONTROLLER_Feature.h
* @brief Feature controller allow to send command related of a Feature.
*/

#ifndef _ARCONTROLLER_FEATURE_H_
#define _ARCONTROLLER_FEATURE_H_

#include <stdlib.h>

#include <libARSAL/ARSAL_Print.h>
#include <libARSAL/ARSAL_Mutex.h>
#include <libARCommands/ARCommands.h>
#include <uthash/uthash.h>

#include <libARController/ARCONTROLLER_Error.h>
#include <libARController/ARCONTROLLER_Network.h>
#include <libARController/ARCONTROLLER_DICTIONARY_Key.h>
#include <libARController/ARCONTROLLER_Dictionary.h>

/*******************************
 * --- FEATURE ARDrone3 --- 
 ******************************/

/**
 * @brief Private part of ARCONTROLLER_FEATURE_ARDrone3_t.
 */
typedef struct ARCONTROLLER_FEATURE_ARDrone3_Private_t ARCONTROLLER_FEATURE_ARDrone3_Private_t;

/**
 * @brief Feature controller allow to send command related of ARDrone3 Feature.
 * All ARDrone3-only commands
 */
typedef struct ARCONTROLLER_FEATURE_ARDrone3_t ARCONTROLLER_FEATURE_ARDrone3_t;

/**
 * @brief Create a new ARDrone3 Feature Controller
 * @warning This function allocate memory
 * @post ARCONTROLLER_FEATURE_ARDrone3_Delete() must be called to delete the Feature Controller and free the memory allocated.
 * @param[in] networkController The networkController used to send commands ; can be NULL and defind later with ARCONTROLLER_FEATURE_ARDrone3_SetNetworkController().
 * @param[out] error executing error.
 * @return the new ARDrone3 Feature Controller
 * @see ARCONTROLLER_FEATURE_ARDrone3_Delete
 */
ARCONTROLLER_FEATURE_ARDrone3_t *ARCONTROLLER_FEATURE_ARDrone3_New (ARCONTROLLER_Network_t *networkController, eARCONTROLLER_ERROR *error);

/**
 * @brief Delete the ARDrone3 Feature Controller
 * @warning This function free memory
 * @param feature The feature controller to delete
 * @see ARCONTROLLER_FEATURE_ARDrone3_New
 */
void ARCONTROLLER_FEATURE_ARDrone3_Delete (ARCONTROLLER_FEATURE_ARDrone3_t **feature);

/**
 * @brief Get the dictionay of the ARDrone3 Feature Controller
 * @param feature The feature controller owning the dictionary to get
 * @param[out] error executing error.
 */
ARCONTROLLER_DICTIONARY_COMMANDS_t *ARCONTROLLER_FEATURE_ARDrone3_GetDictionary (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCONTROLLER_ERROR *error);

/**
 * @brief Add a callback to use when a command in project <code>ARDrone3</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] callback the callback to add.
 * @param[in] commandKey Key of the command which the callback must be associated.
 * @param[out] error executing error.
 * @param[int] customData custom data given as parameter to the callback.
 * @see ARCONTROLLER_FEATURE_ARDrone3_RemoveCallback.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_AddCallback (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

/**
 * @brief Remove a callback used when a command in project <code>ARDrone3</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] callback the callback to remove.
 * @param[int] customData The custom data given to the register.
 * @param[out] error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_RemoveCallback (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

/**
 * class: Piloting 
 * All commands related to piloting the totoDrone
 */


/**
 * @brief Send a command <code>FlatTrim</code> of class <code>Piloting</code> in feature <code>ARDrone3</code>
 * Do a flat trim
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingFlatTrim_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature);

/**
 * @brief Send a command <code>TakeOff</code> of class <code>Piloting</code> in feature <code>ARDrone3</code>
 * Ask the drone to take off
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingTakeOff_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature);

/**
 * @brief Send a command <code>PCMD</code> of class <code>Piloting</code> in feature <code>ARDrone3</code>
 * Ask the drone to move around.
 * @param feature feature owning the commands
 * @param flag Boolean flag to activate roll/pitch movement
 * @param roll Roll consign for the drone [-100;100]
 * @param pitch Pitch consign for the drone [-100;100]
 * @param yaw Yaw consign for the drone [-100;100]
 * @param gaz Gaz consign for the drone [-100;100]
 * @param psi [NOT USED] - Magnetic north heading of the controlling device (deg) [-180;180]
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingPCMD_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t flag, int8_t roll, int8_t pitch, int8_t yaw, int8_t gaz, float psi);

/**
 * @brief Set the parameters to send through the command <code>PCMD</code> of class <code>Piloting</code> in project <code>ARDrone3</code>
 * Ask the drone to move around.
 * @param feature feature owning the commands
 * @param flag Boolean flag to activate roll/pitch movement
 * @param roll Roll consign for the drone [-100;100]
 * @param pitch Pitch consign for the drone [-100;100]
 * @param yaw Yaw consign for the drone [-100;100]
 * @param gaz Gaz consign for the drone [-100;100]
 * @param psi [NOT USED] - Magnetic north heading of the controlling device (deg) [-180;180]
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SetPilotingPCMD_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t flag, int8_t roll, int8_t pitch, int8_t yaw, int8_t gaz, float psi);

/**
 * @brief Send the a command <code>PCMD</code> of class <code>Piloting</code> in project <code>ARDrone3</code> with the parame set beforehand 
 * Ask the drone to move around.
 * @param feature feature owning the commands
 * @param cmdBuffer buffer to store the command
 * @param cmdBufferSize size of the buffer
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_ARDrone3_SendPilotingPCMDStruct (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t *cmdBuffer, int32_t cmdBufferSize);

/**
 * @brief Set flag sent through the command <code>PCMD</code> of class <code>Piloting</code> in project <code>ARDrone3</code>
 * Ask the drone to move around.
 * @param feature feature owning the commands
 * @param flag Boolean flag to activate roll/pitch movement
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SetPilotingPCMDFlag_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t flag);

/**
 * @brief Set roll sent through the command <code>PCMD</code> of class <code>Piloting</code> in project <code>ARDrone3</code>
 * Ask the drone to move around.
 * @param feature feature owning the commands
 * @param roll Roll consign for the drone [-100;100]
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SetPilotingPCMDRoll_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, int8_t roll);

/**
 * @brief Set pitch sent through the command <code>PCMD</code> of class <code>Piloting</code> in project <code>ARDrone3</code>
 * Ask the drone to move around.
 * @param feature feature owning the commands
 * @param pitch Pitch consign for the drone [-100;100]
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SetPilotingPCMDPitch_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, int8_t pitch);

/**
 * @brief Set yaw sent through the command <code>PCMD</code> of class <code>Piloting</code> in project <code>ARDrone3</code>
 * Ask the drone to move around.
 * @param feature feature owning the commands
 * @param yaw Yaw consign for the drone [-100;100]
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SetPilotingPCMDYaw_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, int8_t yaw);

/**
 * @brief Set gaz sent through the command <code>PCMD</code> of class <code>Piloting</code> in project <code>ARDrone3</code>
 * Ask the drone to move around.
 * @param feature feature owning the commands
 * @param gaz Gaz consign for the drone [-100;100]
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SetPilotingPCMDGaz_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, int8_t gaz);

/**
 * @brief Set psi sent through the command <code>PCMD</code> of class <code>Piloting</code> in project <code>ARDrone3</code>
 * Ask the drone to move around.
 * @param feature feature owning the commands
 * @param psi [NOT USED] - Magnetic north heading of the controlling device (deg) [-180;180]
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SetPilotingPCMDPsi_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float psi);

/**
 * @brief Send a command <code>Landing</code> of class <code>Piloting</code> in feature <code>ARDrone3</code>
 * Ask the drone to land
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingLanding_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature);

/**
 * @brief Send a command <code>Emergency</code> of class <code>Piloting</code> in feature <code>ARDrone3</code>
 * Put drone in emergency user state
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingEmergency_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature);

/**
 * @brief Send a command <code>NavigateHome</code> of class <code>Piloting</code> in feature <code>ARDrone3</code>
 * Ask the drone to fly to home
 * @param feature feature owning the commands
 * @param start 1 to start the navigate home, 0 to stop it
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingNavigateHome_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t start);

/**
 * @brief Send a command <code>AutoTakeOffMode</code> of class <code>Piloting</code> in feature <code>ARDrone3</code>
 * [NOT USED] Set Drone3 in automatic take off mode
 * @param feature feature owning the commands
 * @param state State of automatic take off mode (1 for autotake off enabled)
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingAutoTakeOffMode_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t state);

/**
 * class: Animations 
 * Animation commands
 */


/**
 * @brief Send a command <code>Flip</code> of class <code>Animations</code> in feature <code>ARDrone3</code>
 * Make a flip
 * @param feature feature owning the commands
 * @param direction Direction for the flip
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendAnimationsFlip_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_ANIMATIONS_FLIP_DIRECTION direction);

/**
 * class: Camera 
 * Ask the drone to move camera
 */


/**
 * @brief Send a command <code>Orientation</code> of class <code>Camera</code> in feature <code>ARDrone3</code>
 * Ask the drone to move camera.
 * @param feature feature owning the commands
 * @param tilt Tilt camera consign for the drone (in degree)
 * @param tilt The value is saturated by the drone.
 * @param tilt Saturation value is sent by thre drone through CameraSettingsChanged command.
 * @param pan Pan camera consign for the drone (in degree)
 * @param pan The value is saturated by the drone.
 * @param pan Saturation value is sent by thre drone through CameraSettingsChanged command.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendCameraOrientation_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, int8_t tilt, int8_t pan);

/**
 * class: MediaRecord 
 * Media recording management
 */


/**
 * @brief Send a command <code>Picture</code> of class <code>MediaRecord</code> in feature <code>ARDrone3</code>
 * @deprecated
 * Take picture
 * @param feature feature owning the commands
 * @param mass_storage_id Mass storage id to take picture
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendMediaRecordPicture_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t mass_storage_id);

/**
 * @brief Send a command <code>Video</code> of class <code>MediaRecord</code> in feature <code>ARDrone3</code>
 * @deprecated
 * Video record
 * @param feature feature owning the commands
 * @param record Command to record video
 * @param mass_storage_id Mass storage id to record
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendMediaRecordVideo_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_MEDIARECORD_VIDEO_RECORD record, uint8_t mass_storage_id);

/**
 * @brief Send a command <code>PictureV2</code> of class <code>MediaRecord</code> in feature <code>ARDrone3</code>
 * Take picture
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendMediaRecordPictureV2_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature);

/**
 * @brief Send a command <code>VideoV2</code> of class <code>MediaRecord</code> in feature <code>ARDrone3</code>
 * Video record
 * @param feature feature owning the commands
 * @param record Command to record video
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendMediaRecordVideoV2_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_MEDIARECORD_VIDEOV2_RECORD record);

/**
 * class: MediaRecordState 
 * State of media recording
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGED_STATE; /**< Key of the argument </code>state</code> of class <code>MediaRecordState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGED_MASS_STORAGE_ID; /**< Key of the argument </code>mass_storage_id</code> of class <code>MediaRecordState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE; /**< Key of the argument </code>state</code> of class <code>MediaRecordState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGED_MASS_STORAGE_ID; /**< Key of the argument </code>mass_storage_id</code> of class <code>MediaRecordState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE; /**< Key of the argument </code>state</code> of class <code>MediaRecordState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR; /**< Key of the argument </code>error</code> of class <code>MediaRecordState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE; /**< Key of the argument </code>state</code> of class <code>MediaRecordState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR; /**< Key of the argument </code>error</code> of class <code>MediaRecordState</code> in feature <code>ARDrone3</code> */

/**
 * class: MediaRecordEvent 
 * Events of media recording
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT; /**< Key of the argument </code>event</code> of class <code>MediaRecordEvent</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR; /**< Key of the argument </code>error</code> of class <code>MediaRecordEvent</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT; /**< Key of the argument </code>event</code> of class <code>MediaRecordEvent</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR; /**< Key of the argument </code>error</code> of class <code>MediaRecordEvent</code> in feature <code>ARDrone3</code> */

/**
 * class: PilotingState 
 * State from drone
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE; /**< Key of the argument </code>state</code> of class <code>PilotingState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_ALERTSTATECHANGED_STATE; /**< Key of the argument </code>state</code> of class <code>PilotingState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_STATE; /**< Key of the argument </code>state</code> of class <code>PilotingState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_REASON; /**< Key of the argument </code>reason</code> of class <code>PilotingState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_POSITIONCHANGED_LATITUDE; /**< Key of the argument </code>latitude</code> of class <code>PilotingState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_POSITIONCHANGED_LONGITUDE; /**< Key of the argument </code>longitude</code> of class <code>PilotingState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_POSITIONCHANGED_ALTITUDE; /**< Key of the argument </code>altitude</code> of class <code>PilotingState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_SPEEDCHANGED_SPEEDX; /**< Key of the argument </code>speedX</code> of class <code>PilotingState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_SPEEDCHANGED_SPEEDY; /**< Key of the argument </code>speedY</code> of class <code>PilotingState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_SPEEDCHANGED_SPEEDZ; /**< Key of the argument </code>speedZ</code> of class <code>PilotingState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_ATTITUDECHANGED_ROLL; /**< Key of the argument </code>roll</code> of class <code>PilotingState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_ATTITUDECHANGED_PITCH; /**< Key of the argument </code>pitch</code> of class <code>PilotingState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_ATTITUDECHANGED_YAW; /**< Key of the argument </code>yaw</code> of class <code>PilotingState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_AUTOTAKEOFFMODECHANGED_STATE; /**< Key of the argument </code>state</code> of class <code>PilotingState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_ALTITUDECHANGED_ALTITUDE; /**< Key of the argument </code>altitude</code> of class <code>PilotingState</code> in feature <code>ARDrone3</code> */

/**
 * class: Network 
 * Network related commands
 */


/**
 * @brief Send a command <code>WifiScan</code> of class <code>Network</code> in feature <code>ARDrone3</code>
 * Launches wifi network scan
 * @param feature feature owning the commands
 * @param band The band(s) : 2.4 Ghz, 5 Ghz, or both
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendNetworkWifiScan_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_NETWORK_WIFISCAN_BAND band);

/**
 * @brief Send a command <code>WifiAuthChannel</code> of class <code>Network</code> in feature <code>ARDrone3</code>
 * Controller inquire the list of authorized wifi channels.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendNetworkWifiAuthChannel_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature);

/**
 * class: NetworkState 
 * Network state from Product
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSTATE_WIFISCANLISTCHANGED_SSID; /**< Key of the argument </code>ssid</code> of class <code>NetworkState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSTATE_WIFISCANLISTCHANGED_RSSI; /**< Key of the argument </code>rssi</code> of class <code>NetworkState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSTATE_WIFISCANLISTCHANGED_BAND; /**< Key of the argument </code>band</code> of class <code>NetworkState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSTATE_WIFISCANLISTCHANGED_CHANNEL; /**< Key of the argument </code>channel</code> of class <code>NetworkState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND; /**< Key of the argument </code>band</code> of class <code>NetworkState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_CHANNEL; /**< Key of the argument </code>channel</code> of class <code>NetworkState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_IN_OR_OUT; /**< Key of the argument </code>in_or_out</code> of class <code>NetworkState</code> in feature <code>ARDrone3</code> */

/**
 * class: PilotingSettings 
 * Piloting Settings commands
 */


/**
 * @brief Send a command <code>MaxAltitude</code> of class <code>PilotingSettings</code> in feature <code>ARDrone3</code>
 * Set Max Altitude
 * @param feature feature owning the commands
 * @param current Current altitude max in m
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsMaxAltitude_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float current);

/**
 * @brief Send a command <code>MaxTilt</code> of class <code>PilotingSettings</code> in feature <code>ARDrone3</code>
 * Set Max Tilt
 * @param feature feature owning the commands
 * @param current Current tilt max in degree
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsMaxTilt_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float current);

/**
 * @brief Send a command <code>AbsolutControl</code> of class <code>PilotingSettings</code> in feature <code>ARDrone3</code>
 * [NOT USED] Enable/Disable absolut control
 * @param feature feature owning the commands
 * @param on 1 to enable, 0 to disable
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsAbsolutControl_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t on);

/**
 * @brief Send a command <code>MaxDistance</code> of class <code>PilotingSettings</code> in feature <code>ARDrone3</code>
 * Set the distance max of the drone
 * @param feature feature owning the commands
 * @param value Current max distance in meter
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsMaxDistance_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float value);

/**
 * @brief Send a command <code>NoFlyOverMaxDistance</code> of class <code>PilotingSettings</code> in feature <code>ARDrone3</code>
 * Indication about how the product handle flying over the max distance limitation
 * @param feature feature owning the commands
 * @param shouldNotFlyOver 1 if the drone can't fly further than max distance, 0 if no limitation on the drone should be done
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsNoFlyOverMaxDistance_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t shouldNotFlyOver);

/**
 * class: PilotingSettingsState 
 * Piloting Settings state from product
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MAXALTITUDECHANGED_CURRENT; /**< Key of the argument </code>current</code> of class <code>PilotingSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MAXALTITUDECHANGED_MIN; /**< Key of the argument </code>min</code> of class <code>PilotingSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MAXALTITUDECHANGED_MAX; /**< Key of the argument </code>max</code> of class <code>PilotingSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MAXTILTCHANGED_CURRENT; /**< Key of the argument </code>current</code> of class <code>PilotingSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MAXTILTCHANGED_MIN; /**< Key of the argument </code>min</code> of class <code>PilotingSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MAXTILTCHANGED_MAX; /**< Key of the argument </code>max</code> of class <code>PilotingSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_ABSOLUTCONTROLCHANGED_ON; /**< Key of the argument </code>on</code> of class <code>PilotingSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MAXDISTANCECHANGED_CURRENT; /**< Key of the argument </code>current</code> of class <code>PilotingSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MAXDISTANCECHANGED_MIN; /**< Key of the argument </code>min</code> of class <code>PilotingSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MAXDISTANCECHANGED_MAX; /**< Key of the argument </code>max</code> of class <code>PilotingSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_NOFLYOVERMAXDISTANCECHANGED_SHOULDNOTFLYOVER; /**< Key of the argument </code>shouldNotFlyOver</code> of class <code>PilotingSettingsState</code> in feature <code>ARDrone3</code> */

/**
 * class: SpeedSettings 
 * Speed Settings commands
 */


/**
 * @brief Send a command <code>MaxVerticalSpeed</code> of class <code>SpeedSettings</code> in feature <code>ARDrone3</code>
 * Set Max Vertical speed
 * @param feature feature owning the commands
 * @param current Current max vertical speed in m/s
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendSpeedSettingsMaxVerticalSpeed_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float current);

/**
 * @brief Send a command <code>MaxRotationSpeed</code> of class <code>SpeedSettings</code> in feature <code>ARDrone3</code>
 * Set Max Rotation speed
 * @param feature feature owning the commands
 * @param current Current max rotation speed in degree/s
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendSpeedSettingsMaxRotationSpeed_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float current);

/**
 * @brief Send a command <code>HullProtection</code> of class <code>SpeedSettings</code> in feature <code>ARDrone3</code>
 * Presence of hull protection
 * @param feature feature owning the commands
 * @param present 1 if present, 0 if not present
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendSpeedSettingsHullProtection_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t present);

/**
 * @brief Send a command <code>Outdoor</code> of class <code>SpeedSettings</code> in feature <code>ARDrone3</code>
 * Outdoor property
 * @param feature feature owning the commands
 * @param outdoor 1 if outdoor flight, 0 if indoor flight
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendSpeedSettingsOutdoor_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t outdoor);

/**
 * class: SpeedSettingsState 
 * Speed Settings state from product
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_MAXVERTICALSPEEDCHANGED_CURRENT; /**< Key of the argument </code>current</code> of class <code>SpeedSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_MAXVERTICALSPEEDCHANGED_MIN; /**< Key of the argument </code>min</code> of class <code>SpeedSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_MAXVERTICALSPEEDCHANGED_MAX; /**< Key of the argument </code>max</code> of class <code>SpeedSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_MAXROTATIONSPEEDCHANGED_CURRENT; /**< Key of the argument </code>current</code> of class <code>SpeedSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_MAXROTATIONSPEEDCHANGED_MIN; /**< Key of the argument </code>min</code> of class <code>SpeedSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_MAXROTATIONSPEEDCHANGED_MAX; /**< Key of the argument </code>max</code> of class <code>SpeedSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_HULLPROTECTIONCHANGED_PRESENT; /**< Key of the argument </code>present</code> of class <code>SpeedSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_OUTDOORCHANGED_OUTDOOR; /**< Key of the argument </code>outdoor</code> of class <code>SpeedSettingsState</code> in feature <code>ARDrone3</code> */

/**
 * class: NetworkSettings 
 * Network settings commands
 */


/**
 * @brief Send a command <code>WifiSelection</code> of class <code>NetworkSettings</code> in feature <code>ARDrone3</code>
 * Auto-select channel of choosen band
 * @param feature feature owning the commands
 * @param type The type of wifi selection (auto, manual)
 * @param band The allowed band(s) : 2.4 Ghz, 5 Ghz, or all
 * @param channel The channel (not used in auto mode)
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendNetworkSettingsWifiSelection_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_TYPE type, eARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_BAND band, uint8_t channel);

/**
 * class: NetworkSettingsState 
 * Network settings state from product
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE; /**< Key of the argument </code>type</code> of class <code>NetworkSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND; /**< Key of the argument </code>band</code> of class <code>NetworkSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_CHANNEL; /**< Key of the argument </code>channel</code> of class <code>NetworkSettingsState</code> in feature <code>ARDrone3</code> */

/**
 * class: Settings 
 * Settings commands
 */


/**
 * class: SettingsState 
 * Settings state from product
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_PRODUCTMOTORVERSIONLISTCHANGED_MOTOR_NUMBER; /**< Key of the argument </code>motor_number</code> of class <code>SettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_PRODUCTMOTORVERSIONLISTCHANGED_TYPE; /**< Key of the argument </code>type</code> of class <code>SettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_PRODUCTMOTORVERSIONLISTCHANGED_SOFTWARE; /**< Key of the argument </code>software</code> of class <code>SettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_PRODUCTMOTORVERSIONLISTCHANGED_HARDWARE; /**< Key of the argument </code>hardware</code> of class <code>SettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_PRODUCTGPSVERSIONCHANGED_SOFTWARE; /**< Key of the argument </code>software</code> of class <code>SettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_PRODUCTGPSVERSIONCHANGED_HARDWARE; /**< Key of the argument </code>hardware</code> of class <code>SettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORIDS; /**< Key of the argument </code>motorIds</code> of class <code>SettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR; /**< Key of the argument </code>motorError</code> of class <code>SettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_MOTORSOFTWAREVERSIONCHANGED_VERSION; /**< Key of the argument </code>version</code> of class <code>SettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_MOTORFLIGHTSSTATUSCHANGED_NBFLIGHTS; /**< Key of the argument </code>nbFlights</code> of class <code>SettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_MOTORFLIGHTSSTATUSCHANGED_LASTFLIGHTDURATION; /**< Key of the argument </code>lastFlightDuration</code> of class <code>SettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_MOTORFLIGHTSSTATUSCHANGED_TOTALFLIGHTDURATION; /**< Key of the argument </code>totalFlightDuration</code> of class <code>SettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR; /**< Key of the argument </code>motorError</code> of class <code>SettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_P7ID_SERIALID; /**< Key of the argument </code>serialID</code> of class <code>SettingsState</code> in feature <code>ARDrone3</code> */

/**
 * class: DirectorMode 
 * Director mode commands
 */


/**
 * class: DirectorModeState 
 * Director mode state from product
 */


/**
 * class: PictureSettings 
 * Photo settings chosen by the user
 */


/**
 * @brief Send a command <code>PictureFormatSelection</code> of class <code>PictureSettings</code> in feature <code>ARDrone3</code>
 * The format of the photo
 * @param feature feature owning the commands
 * @param type The type of photo format
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsPictureFormatSelection_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_PICTURESETTINGS_PICTUREFORMATSELECTION_TYPE type);

/**
 * @brief Send a command <code>AutoWhiteBalanceSelection</code> of class <code>PictureSettings</code> in feature <code>ARDrone3</code>
 * AutoWhiteBalance mode
 * @param feature feature owning the commands
 * @param type The type auto white balance
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsAutoWhiteBalanceSelection_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_PICTURESETTINGS_AUTOWHITEBALANCESELECTION_TYPE type);

/**
 * @brief Send a command <code>ExpositionSelection</code> of class <code>PictureSettings</code> in feature <code>ARDrone3</code>
 * The exposition of the image
 * @param feature feature owning the commands
 * @param value Exposition value (bounds given by ExpositionChanged arg min and max, by default [-3:3])
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsExpositionSelection_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float value);

/**
 * @brief Send a command <code>SaturationSelection</code> of class <code>PictureSettings</code> in feature <code>ARDrone3</code>
 * The saturation of the image
 * @param feature feature owning the commands
 * @param value Saturation value (bounds given by SaturationChanged arg min and max, by default [-100:100])
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsSaturationSelection_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float value);

/**
 * @brief Send a command <code>TimelapseSelection</code> of class <code>PictureSettings</code> in feature <code>ARDrone3</code>
 * Picture taken periodically
 * @param feature feature owning the commands
 * @param enabled 1 if timelapse is enabled, 0 otherwise
 * @param interval interval in seconds for taking pictures
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsTimelapseSelection_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t enabled, float interval);

/**
 * @brief Send a command <code>VideoAutorecordSelection</code> of class <code>PictureSettings</code> in feature <code>ARDrone3</code>
 * Video autorecord
 * @param feature feature owning the commands
 * @param enabled 1 if video autorecord is enabled, 0 otherwise
 * @param mass_storage_id Mass storage id to take video
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsVideoAutorecordSelection_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t enabled, uint8_t mass_storage_id);

/**
 * class: PictureSettingsState 
 * Photo settings state from product
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_PICTUREFORMATCHANGED_TYPE; /**< Key of the argument </code>type</code> of class <code>PictureSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_AUTOWHITEBALANCECHANGED_TYPE; /**< Key of the argument </code>type</code> of class <code>PictureSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_EXPOSITIONCHANGED_VALUE; /**< Key of the argument </code>value</code> of class <code>PictureSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_EXPOSITIONCHANGED_MIN; /**< Key of the argument </code>min</code> of class <code>PictureSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_EXPOSITIONCHANGED_MAX; /**< Key of the argument </code>max</code> of class <code>PictureSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_SATURATIONCHANGED_VALUE; /**< Key of the argument </code>value</code> of class <code>PictureSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_SATURATIONCHANGED_MIN; /**< Key of the argument </code>min</code> of class <code>PictureSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_SATURATIONCHANGED_MAX; /**< Key of the argument </code>max</code> of class <code>PictureSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_TIMELAPSECHANGED_ENABLED; /**< Key of the argument </code>enabled</code> of class <code>PictureSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_TIMELAPSECHANGED_INTERVAL; /**< Key of the argument </code>interval</code> of class <code>PictureSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_TIMELAPSECHANGED_MININTERVAL; /**< Key of the argument </code>minInterval</code> of class <code>PictureSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_TIMELAPSECHANGED_MAXINTERVAL; /**< Key of the argument </code>maxInterval</code> of class <code>PictureSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_VIDEOAUTORECORDCHANGED_ENABLED; /**< Key of the argument </code>enabled</code> of class <code>PictureSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_VIDEOAUTORECORDCHANGED_MASS_STORAGE_ID; /**< Key of the argument </code>mass_storage_id</code> of class <code>PictureSettingsState</code> in feature <code>ARDrone3</code> */

/**
 * class: MediaStreaming 
 * Control media streaming behavior.
 */


/**
 * @brief Send a command <code>VideoEnable</code> of class <code>MediaStreaming</code> in feature <code>ARDrone3</code>
 * Enable/disable video streaming.
 * @param feature feature owning the commands
 * @param enable 1 to enable, 0 to disable.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendMediaStreamingVideoEnable_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t enable);

/**
 * class: MediaStreamingState 
 * Media streaming status.
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED; /**< Key of the argument </code>enabled</code> of class <code>MediaStreamingState</code> in feature <code>ARDrone3</code> */

/**
 * class: GPSSettings 
 * GPS settings
 */


/**
 * @brief Send a command <code>SetHome</code> of class <code>GPSSettings</code> in feature <code>ARDrone3</code>
 * Set home location
 * @param feature feature owning the commands
 * @param latitude Home latitude in decimal degrees
 * @param longitude Home longitude in decimal degrees
 * @param altitude Home altitude in meters
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendGPSSettingsSetHome_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, double latitude, double longitude, double altitude);

/**
 * @brief Send a command <code>ResetHome</code> of class <code>GPSSettings</code> in feature <code>ARDrone3</code>
 * Reset home location and let the drone make its own home
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendGPSSettingsResetHome_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature);

/**
 * @brief Send a command <code>SendControllerGPS</code> of class <code>GPSSettings</code> in feature <code>ARDrone3</code>
 * send controller GPS location
 * @param feature feature owning the commands
 * @param latitude GPS latitude in decimal degrees
 * @param longitude GPS longitude in decimal degrees
 * @param altitude GPS altitude in meters
 * @param horizontalAccuracy Horizontal Accuracy in meter ; equal -1 if no horizontal Accuracy
 * @param verticalAccuracy Vertical Accuracy in meter ; equal -1 if no vertical Accuracy
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendGPSSettingsSendControllerGPS_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, double latitude, double longitude, double altitude, double horizontalAccuracy, double verticalAccuracy);

/**
 * @brief Send a command <code>HomeType</code> of class <code>GPSSettings</code> in feature <code>ARDrone3</code>
 * Set user preference for the type of the home position. Note that this is only a preference
 * @param feature feature owning the commands
 * @param type The type of the home position
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendGPSSettingsHomeType_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_GPSSETTINGS_HOMETYPE_TYPE type);

/**
 * @brief Send a command <code>ReturnHomeDelay</code> of class <code>GPSSettings</code> in feature <code>ARDrone3</code>
 * Set the delay after which the drone will automatically try to return home
 * @param feature feature owning the commands
 * @param delay Delay in second
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendGPSSettingsReturnHomeDelay_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint16_t delay);

/**
 * class: GPSSettingsState 
 * GPS settings state
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_HOMECHANGED_LATITUDE; /**< Key of the argument </code>latitude</code> of class <code>GPSSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_HOMECHANGED_LONGITUDE; /**< Key of the argument </code>longitude</code> of class <code>GPSSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_HOMECHANGED_ALTITUDE; /**< Key of the argument </code>altitude</code> of class <code>GPSSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_RESETHOMECHANGED_LATITUDE; /**< Key of the argument </code>latitude</code> of class <code>GPSSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_RESETHOMECHANGED_LONGITUDE; /**< Key of the argument </code>longitude</code> of class <code>GPSSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_RESETHOMECHANGED_ALTITUDE; /**< Key of the argument </code>altitude</code> of class <code>GPSSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_GPSFIXSTATECHANGED_FIXED; /**< Key of the argument </code>fixed</code> of class <code>GPSSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_GPSUPDATESTATECHANGED_STATE; /**< Key of the argument </code>state</code> of class <code>GPSSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_HOMETYPECHANGED_TYPE; /**< Key of the argument </code>type</code> of class <code>GPSSettingsState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_RETURNHOMEDELAYCHANGED_DELAY; /**< Key of the argument </code>delay</code> of class <code>GPSSettingsState</code> in feature <code>ARDrone3</code> */

/**
 * class: CameraState 
 * Camera state
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_CAMERASTATE_ORIENTATION_TILT; /**< Key of the argument </code>tilt</code> of class <code>CameraState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_CAMERASTATE_ORIENTATION_PAN; /**< Key of the argument </code>pan</code> of class <code>CameraState</code> in feature <code>ARDrone3</code> */

/**
 * class: Antiflickering 
 * Anti-flickering related commands
 */


/**
 * @brief Send a command <code>ElectricFrequency</code> of class <code>Antiflickering</code> in feature <code>ARDrone3</code>
 * Electric frequency of the country determined by the position of the controller
 * @param feature feature owning the commands
 * @param frequency Type of the electric frequency
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendAntiflickeringElectricFrequency_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_ANTIFLICKERING_ELECTRICFREQUENCY_FREQUENCY frequency);

/**
 * @brief Send a command <code>SetMode</code> of class <code>Antiflickering</code> in feature <code>ARDrone3</code>
 * Set the anti flickering mode
 * @param feature feature owning the commands
 * @param mode Mode of the anti flickering functionnality
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendAntiflickeringSetMode_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_ANTIFLICKERING_SETMODE_MODE mode);

/**
 * class: AntiflickeringState 
 * Anti-flickering related states
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_ANTIFLICKERINGSTATE_ELECTRICFREQUENCYCHANGED_FREQUENCY; /**< Key of the argument </code>frequency</code> of class <code>AntiflickeringState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_ANTIFLICKERINGSTATE_MODECHANGED_MODE; /**< Key of the argument </code>mode</code> of class <code>AntiflickeringState</code> in feature <code>ARDrone3</code> */

/**
 * class: GPSState 
 * GPS related States
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSTATE_NUMBEROFSATELLITECHANGED_NUMBEROFSATELLITE; /**< Key of the argument </code>numberOfSatellite</code> of class <code>GPSState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSTATE_HOMETYPEAVAILABILITYCHANGED_TYPE; /**< Key of the argument </code>type</code> of class <code>GPSState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSTATE_HOMETYPEAVAILABILITYCHANGED_AVAILABLE; /**< Key of the argument </code>available</code> of class <code>GPSState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSTATE_HOMETYPECHOSENCHANGED_TYPE; /**< Key of the argument </code>type</code> of class <code>GPSState</code> in feature <code>ARDrone3</code> */

/**
 * class: PROState 
 * Pro features enabled on the Bebop
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PROSTATE_FEATURES_FEATURES; /**< Key of the argument </code>features</code> of class <code>PROState</code> in feature <code>ARDrone3</code> */

/**
 * @brief Feature controller allow to send command related of ARDrone3 Feature.
 * All ARDrone3-only commands
 */
struct ARCONTROLLER_FEATURE_ARDrone3_t
{
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingFlatTrim_t sendPilotingFlatTrim;
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingTakeOff_t sendPilotingTakeOff;
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingPCMD_t sendPilotingPCMD;
    ARCONTROLLER_FEATURE_ARDrone3_SetPilotingPCMD_t setPilotingPCMD;
    ARCONTROLLER_FEATURE_ARDrone3_SetPilotingPCMDFlag_t setPilotingPCMDFlag; /**< Send a command <code>PCMD</code> of class <code>Piloting</code> in feature <code>ARDrone3</code>. */
    ARCONTROLLER_FEATURE_ARDrone3_SetPilotingPCMDRoll_t setPilotingPCMDRoll; /**< Send a command <code>PCMD</code> of class <code>Piloting</code> in feature <code>ARDrone3</code>. */
    ARCONTROLLER_FEATURE_ARDrone3_SetPilotingPCMDPitch_t setPilotingPCMDPitch; /**< Send a command <code>PCMD</code> of class <code>Piloting</code> in feature <code>ARDrone3</code>. */
    ARCONTROLLER_FEATURE_ARDrone3_SetPilotingPCMDYaw_t setPilotingPCMDYaw; /**< Send a command <code>PCMD</code> of class <code>Piloting</code> in feature <code>ARDrone3</code>. */
    ARCONTROLLER_FEATURE_ARDrone3_SetPilotingPCMDGaz_t setPilotingPCMDGaz; /**< Send a command <code>PCMD</code> of class <code>Piloting</code> in feature <code>ARDrone3</code>. */
    ARCONTROLLER_FEATURE_ARDrone3_SetPilotingPCMDPsi_t setPilotingPCMDPsi; /**< Send a command <code>PCMD</code> of class <code>Piloting</code> in feature <code>ARDrone3</code>. */
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingLanding_t sendPilotingLanding;
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingEmergency_t sendPilotingEmergency;
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingNavigateHome_t sendPilotingNavigateHome;
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingAutoTakeOffMode_t sendPilotingAutoTakeOffMode;
    ARCONTROLLER_FEATURE_ARDrone3_SendAnimationsFlip_t sendAnimationsFlip;
    ARCONTROLLER_FEATURE_ARDrone3_SendCameraOrientation_t sendCameraOrientation;
    ARCONTROLLER_FEATURE_ARDrone3_SendMediaRecordPicture_t sendMediaRecordPicture;
    ARCONTROLLER_FEATURE_ARDrone3_SendMediaRecordVideo_t sendMediaRecordVideo;
    ARCONTROLLER_FEATURE_ARDrone3_SendMediaRecordPictureV2_t sendMediaRecordPictureV2;
    ARCONTROLLER_FEATURE_ARDrone3_SendMediaRecordVideoV2_t sendMediaRecordVideoV2;
    ARCONTROLLER_FEATURE_ARDrone3_SendNetworkWifiScan_t sendNetworkWifiScan;
    ARCONTROLLER_FEATURE_ARDrone3_SendNetworkWifiAuthChannel_t sendNetworkWifiAuthChannel;
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsMaxAltitude_t sendPilotingSettingsMaxAltitude;
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsMaxTilt_t sendPilotingSettingsMaxTilt;
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsAbsolutControl_t sendPilotingSettingsAbsolutControl;
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsMaxDistance_t sendPilotingSettingsMaxDistance;
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsNoFlyOverMaxDistance_t sendPilotingSettingsNoFlyOverMaxDistance;
    ARCONTROLLER_FEATURE_ARDrone3_SendSpeedSettingsMaxVerticalSpeed_t sendSpeedSettingsMaxVerticalSpeed;
    ARCONTROLLER_FEATURE_ARDrone3_SendSpeedSettingsMaxRotationSpeed_t sendSpeedSettingsMaxRotationSpeed;
    ARCONTROLLER_FEATURE_ARDrone3_SendSpeedSettingsHullProtection_t sendSpeedSettingsHullProtection;
    ARCONTROLLER_FEATURE_ARDrone3_SendSpeedSettingsOutdoor_t sendSpeedSettingsOutdoor;
    ARCONTROLLER_FEATURE_ARDrone3_SendNetworkSettingsWifiSelection_t sendNetworkSettingsWifiSelection;
    ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsPictureFormatSelection_t sendPictureSettingsPictureFormatSelection;
    ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsAutoWhiteBalanceSelection_t sendPictureSettingsAutoWhiteBalanceSelection;
    ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsExpositionSelection_t sendPictureSettingsExpositionSelection;
    ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsSaturationSelection_t sendPictureSettingsSaturationSelection;
    ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsTimelapseSelection_t sendPictureSettingsTimelapseSelection;
    ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsVideoAutorecordSelection_t sendPictureSettingsVideoAutorecordSelection;
    ARCONTROLLER_FEATURE_ARDrone3_SendMediaStreamingVideoEnable_t sendMediaStreamingVideoEnable;
    ARCONTROLLER_FEATURE_ARDrone3_SendGPSSettingsSetHome_t sendGPSSettingsSetHome;
    ARCONTROLLER_FEATURE_ARDrone3_SendGPSSettingsResetHome_t sendGPSSettingsResetHome;
    ARCONTROLLER_FEATURE_ARDrone3_SendGPSSettingsSendControllerGPS_t sendGPSSettingsSendControllerGPS;
    ARCONTROLLER_FEATURE_ARDrone3_SendGPSSettingsHomeType_t sendGPSSettingsHomeType;
    ARCONTROLLER_FEATURE_ARDrone3_SendGPSSettingsReturnHomeDelay_t sendGPSSettingsReturnHomeDelay;
    ARCONTROLLER_FEATURE_ARDrone3_SendAntiflickeringElectricFrequency_t sendAntiflickeringElectricFrequency;
    ARCONTROLLER_FEATURE_ARDrone3_SendAntiflickeringSetMode_t sendAntiflickeringSetMode;
    ARCONTROLLER_FEATURE_ARDrone3_Private_t *privatePart; /**< Private part of ARCONTROLLER_FEATURE_ARDrone3_t */
};

/**
 * @brief Set a NetworkController to use to send commands.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] networkController The networkController used to send commands ; must be not NULL.
 * @return error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SetNetworkController (ARCONTROLLER_FEATURE_ARDrone3_t *feature, ARCONTROLLER_Network_t *networkController);

/**
 * @brief Get the elements of a command received.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command.
 * @param[out] error executing error.
 * @return Element dictionary of the command ; Can be null if an error is occurred.
 */
ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_GetCommandElements (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, eARCONTROLLER_ERROR *error);

/*******************************
 * --- FEATURE ARDrone3Debug --- 
 ******************************/

/**
 * @brief Private part of ARCONTROLLER_FEATURE_ARDrone3Debug_t.
 */
typedef struct ARCONTROLLER_FEATURE_ARDrone3Debug_Private_t ARCONTROLLER_FEATURE_ARDrone3Debug_Private_t;

/**
 * @brief Feature controller allow to send command related of ARDrone3Debug Feature.
 * All debug ARDrone3-only commands
 */
typedef struct ARCONTROLLER_FEATURE_ARDrone3Debug_t ARCONTROLLER_FEATURE_ARDrone3Debug_t;

/**
 * @brief Create a new ARDrone3Debug Feature Controller
 * @warning This function allocate memory
 * @post ARCONTROLLER_FEATURE_ARDrone3Debug_Delete() must be called to delete the Feature Controller and free the memory allocated.
 * @param[in] networkController The networkController used to send commands ; can be NULL and defind later with ARCONTROLLER_FEATURE_ARDrone3Debug_SetNetworkController().
 * @param[out] error executing error.
 * @return the new ARDrone3Debug Feature Controller
 * @see ARCONTROLLER_FEATURE_ARDrone3Debug_Delete
 */
ARCONTROLLER_FEATURE_ARDrone3Debug_t *ARCONTROLLER_FEATURE_ARDrone3Debug_New (ARCONTROLLER_Network_t *networkController, eARCONTROLLER_ERROR *error);

/**
 * @brief Delete the ARDrone3Debug Feature Controller
 * @warning This function free memory
 * @param feature The feature controller to delete
 * @see ARCONTROLLER_FEATURE_ARDrone3Debug_New
 */
void ARCONTROLLER_FEATURE_ARDrone3Debug_Delete (ARCONTROLLER_FEATURE_ARDrone3Debug_t **feature);

/**
 * @brief Get the dictionay of the ARDrone3Debug Feature Controller
 * @param feature The feature controller owning the dictionary to get
 * @param[out] error executing error.
 */
ARCONTROLLER_DICTIONARY_COMMANDS_t *ARCONTROLLER_FEATURE_ARDrone3Debug_GetDictionary (ARCONTROLLER_FEATURE_ARDrone3Debug_t *feature, eARCONTROLLER_ERROR *error);

/**
 * @brief Add a callback to use when a command in project <code>ARDrone3Debug</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] callback the callback to add.
 * @param[in] commandKey Key of the command which the callback must be associated.
 * @param[out] error executing error.
 * @param[int] customData custom data given as parameter to the callback.
 * @see ARCONTROLLER_FEATURE_ARDrone3Debug_RemoveCallback.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3Debug_AddCallback (ARCONTROLLER_FEATURE_ARDrone3Debug_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

/**
 * @brief Remove a callback used when a command in project <code>ARDrone3Debug</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] callback the callback to remove.
 * @param[int] customData The custom data given to the register.
 * @param[out] error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3Debug_RemoveCallback (ARCONTROLLER_FEATURE_ARDrone3Debug_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

/**
 * class: Video 
 * Debug commands for video
 */


/**
 * @brief Send a command <code>EnableWobbleCancellation</code> of class <code>Video</code> in feature <code>ARDrone3Debug</code>
 * Turn on/off wobble cancellation
 * @param feature feature owning the commands
 * @param enable When enable=0, wobble cancellation is disabled else it's enabled
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3Debug_SendVideoEnableWobbleCancellation_t) (ARCONTROLLER_FEATURE_ARDrone3Debug_t *feature, uint8_t enable);

/**
 * @brief Send a command <code>SyncAnglesGyros</code> of class <code>Video</code> in feature <code>ARDrone3Debug</code>
 * Adjust delay between angles/gyros and frame for video stabilization and wobble cancellation
 * @param feature feature owning the commands
 * @param anglesDelay_s Shift by x seconds angles (video stabilization)
 * @param gyrosDelay_s Shift by x seconds t gyros (wobble cancellation
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3Debug_SendVideoSyncAnglesGyros_t) (ARCONTROLLER_FEATURE_ARDrone3Debug_t *feature, float anglesDelay_s, float gyrosDelay_s);

/**
 * @brief Send a command <code>ManualWhiteBalance</code> of class <code>Video</code> in feature <code>ARDrone3Debug</code>
 * Tune white balance
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3Debug_SendVideoManualWhiteBalance_t) (ARCONTROLLER_FEATURE_ARDrone3Debug_t *feature);

/**
 * class: BatteryDebugSettings 
 * Debug commands for drone3 battery
 */


/**
 * @brief Send a command <code>UseDrone2Battery</code> of class <code>BatteryDebugSettings</code> in feature <code>ARDrone3Debug</code>
 * Use or not the drone2 battery
 * @param feature feature owning the commands
 * @param drone2BatteryUsed 1 if the drone2 battery is used, 0 if the drone3 battery is used
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3Debug_SendBatteryDebugSettingsUseDrone2Battery_t) (ARCONTROLLER_FEATURE_ARDrone3Debug_t *feature, uint8_t drone2BatteryUsed);

/**
 * class: BatteryDebugSettingsState 
 * Debug commands for drone3 battery state
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3DEBUG_BATTERYDEBUGSETTINGSSTATE_USEDRONE2BATTERYCHANGED_DRONE2BATTERYUSED; /**< Key of the argument </code>drone2BatteryUsed</code> of class <code>BatteryDebugSettingsState</code> in feature <code>ARDrone3Debug</code> */

/**
 * class: GPSDebugState 
 * Debug commands for drone3 gps state
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3DEBUG_GPSDEBUGSTATE_NBSATELLITECHANGED_NBSATELLITE; /**< Key of the argument </code>nbSatellite</code> of class <code>GPSDebugState</code> in feature <code>ARDrone3Debug</code> */

/**
 * @brief Feature controller allow to send command related of ARDrone3Debug Feature.
 * All debug ARDrone3-only commands
 */
struct ARCONTROLLER_FEATURE_ARDrone3Debug_t
{
    ARCONTROLLER_FEATURE_ARDrone3Debug_SendVideoEnableWobbleCancellation_t sendVideoEnableWobbleCancellation;
    ARCONTROLLER_FEATURE_ARDrone3Debug_SendVideoSyncAnglesGyros_t sendVideoSyncAnglesGyros;
    ARCONTROLLER_FEATURE_ARDrone3Debug_SendVideoManualWhiteBalance_t sendVideoManualWhiteBalance;
    ARCONTROLLER_FEATURE_ARDrone3Debug_SendBatteryDebugSettingsUseDrone2Battery_t sendBatteryDebugSettingsUseDrone2Battery;
    ARCONTROLLER_FEATURE_ARDrone3Debug_Private_t *privatePart; /**< Private part of ARCONTROLLER_FEATURE_ARDrone3Debug_t */
};

/**
 * @brief Set a NetworkController to use to send commands.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] networkController The networkController used to send commands ; must be not NULL.
 * @return error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3Debug_SetNetworkController (ARCONTROLLER_FEATURE_ARDrone3Debug_t *feature, ARCONTROLLER_Network_t *networkController);

/**
 * @brief Get the elements of a command received.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command.
 * @param[out] error executing error.
 * @return Element dictionary of the command ; Can be null if an error is occurred.
 */
ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3Debug_GetCommandElements (ARCONTROLLER_FEATURE_ARDrone3Debug_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, eARCONTROLLER_ERROR *error);

/*******************************
 * --- FEATURE common --- 
 ******************************/

/**
 * @brief Private part of ARCONTROLLER_FEATURE_Common_t.
 */
typedef struct ARCONTROLLER_FEATURE_Common_Private_t ARCONTROLLER_FEATURE_Common_Private_t;

/**
 * @brief Feature controller allow to send command related of common Feature.
 * All common commands shared between all projects
 */
typedef struct ARCONTROLLER_FEATURE_Common_t ARCONTROLLER_FEATURE_Common_t;

/**
 * @brief Create a new common Feature Controller
 * @warning This function allocate memory
 * @post ARCONTROLLER_FEATURE_Common_Delete() must be called to delete the Feature Controller and free the memory allocated.
 * @param[in] networkController The networkController used to send commands ; can be NULL and defind later with ARCONTROLLER_FEATURE_Common_SetNetworkController().
 * @param[out] error executing error.
 * @return the new common Feature Controller
 * @see ARCONTROLLER_FEATURE_Common_Delete
 */
ARCONTROLLER_FEATURE_Common_t *ARCONTROLLER_FEATURE_Common_New (ARCONTROLLER_Network_t *networkController, eARCONTROLLER_ERROR *error);

/**
 * @brief Delete the common Feature Controller
 * @warning This function free memory
 * @param feature The feature controller to delete
 * @see ARCONTROLLER_FEATURE_Common_New
 */
void ARCONTROLLER_FEATURE_Common_Delete (ARCONTROLLER_FEATURE_Common_t **feature);

/**
 * @brief Get the dictionay of the common Feature Controller
 * @param feature The feature controller owning the dictionary to get
 * @param[out] error executing error.
 */
ARCONTROLLER_DICTIONARY_COMMANDS_t *ARCONTROLLER_FEATURE_Common_GetDictionary (ARCONTROLLER_FEATURE_Common_t *feature, eARCONTROLLER_ERROR *error);

/**
 * @brief Add a callback to use when a command in project <code>Common</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] callback the callback to add.
 * @param[in] commandKey Key of the command which the callback must be associated.
 * @param[out] error executing error.
 * @param[int] customData custom data given as parameter to the callback.
 * @see ARCONTROLLER_FEATURE_Common_RemoveCallback.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Common_AddCallback (ARCONTROLLER_FEATURE_Common_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

/**
 * @brief Remove a callback used when a command in project <code>Common</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] callback the callback to remove.
 * @param[int] customData The custom data given to the register.
 * @param[out] error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Common_RemoveCallback (ARCONTROLLER_FEATURE_Common_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

/**
 * class: Network 
 * Network related commands
 */


/**
 * @brief Send a command <code>Disconnect</code> of class <code>Network</code> in feature <code>Common</code>
 * Signals the remote that the host will disconnect and close its
 * libARNetwork instance (and all threads that use libARNetwork)
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendNetworkDisconnect_t) (ARCONTROLLER_FEATURE_Common_t *feature);

/**
 * class: NetworkEvent 
 * Network Event from product
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_NETWORKEVENT_DISCONNECTION_CAUSE; /**< Key of the argument </code>cause</code> of class <code>NetworkEvent</code> in feature <code>Common</code> */

/**
 * class: Settings 
 * Settings commands
 */


/**
 * @brief Send a command <code>AllSettings</code> of class <code>Settings</code> in feature <code>Common</code>
 * Get all product settings, the product must send all settings
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendSettingsAllSettings_t) (ARCONTROLLER_FEATURE_Common_t *feature);

/**
 * @brief Send a command <code>Reset</code> of class <code>Settings</code> in feature <code>Common</code>
 * Reset all settings
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendSettingsReset_t) (ARCONTROLLER_FEATURE_Common_t *feature);

/**
 * @brief Send a command <code>ProductName</code> of class <code>Settings</code> in feature <code>Common</code>
 * Set Product name
 * @param feature feature owning the commands
 * @param name Product name
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendSettingsProductName_t) (ARCONTROLLER_FEATURE_Common_t *feature, char * name);

/**
 * @brief Send a command <code>Country</code> of class <code>Settings</code> in feature <code>Common</code>
 * Set current Country of controller
 * @param feature feature owning the commands
 * @param code Country code with ISO 3166 format
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendSettingsCountry_t) (ARCONTROLLER_FEATURE_Common_t *feature, char * code);

/**
 * @brief Send a command <code>AutoCountry</code> of class <code>Settings</code> in feature <code>Common</code>
 * Set Auto Country Settings
 * @param feature feature owning the commands
 * @param automatic Boolean : 0 : Manual / 1 : Auto
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendSettingsAutoCountry_t) (ARCONTROLLER_FEATURE_Common_t *feature, uint8_t automatic);

/**
 * class: SettingsState 
 * Settings state from product
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_SETTINGSSTATE_PRODUCTNAMECHANGED_NAME; /**< Key of the argument </code>name</code> of class <code>SettingsState</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_SETTINGSSTATE_PRODUCTVERSIONCHANGED_SOFTWARE; /**< Key of the argument </code>software</code> of class <code>SettingsState</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_SETTINGSSTATE_PRODUCTVERSIONCHANGED_HARDWARE; /**< Key of the argument </code>hardware</code> of class <code>SettingsState</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_SETTINGSSTATE_PRODUCTSERIALHIGHCHANGED_HIGH; /**< Key of the argument </code>high</code> of class <code>SettingsState</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_SETTINGSSTATE_PRODUCTSERIALLOWCHANGED_LOW; /**< Key of the argument </code>low</code> of class <code>SettingsState</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_SETTINGSSTATE_COUNTRYCHANGED_CODE; /**< Key of the argument </code>code</code> of class <code>SettingsState</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_SETTINGSSTATE_AUTOCOUNTRYCHANGED_AUTOMATIC; /**< Key of the argument </code>automatic</code> of class <code>SettingsState</code> in feature <code>Common</code> */

/**
 * class: Common 
 * Common commands
 */


/**
 * @brief Send a command <code>AllStates</code> of class <code>Common</code> in feature <code>Common</code>
 * Get all product states.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendCommonAllStates_t) (ARCONTROLLER_FEATURE_Common_t *feature);

/**
 * @brief Send a command <code>CurrentDate</code> of class <code>Common</code> in feature <code>Common</code>
 * Set current date of controller
 * @param feature feature owning the commands
 * @param date Date with ISO-8601 format
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendCommonCurrentDate_t) (ARCONTROLLER_FEATURE_Common_t *feature, char * date);

/**
 * @brief Send a command <code>CurrentTime</code> of class <code>Common</code> in feature <code>Common</code>
 * Set current time of controller
 * @param feature feature owning the commands
 * @param time Time with ISO-8601 format
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendCommonCurrentTime_t) (ARCONTROLLER_FEATURE_Common_t *feature, char * time);

/**
 * @brief Send a command <code>Reboot</code> of class <code>Common</code> in feature <code>Common</code>
 * Command to ask reboot to product
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendCommonReboot_t) (ARCONTROLLER_FEATURE_Common_t *feature);

/**
 * class: CommonState 
 * Common state from product
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_BATTERYSTATECHANGED_PERCENT; /**< Key of the argument </code>percent</code> of class <code>CommonState</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGESTATELISTCHANGED_MASS_STORAGE_ID; /**< Key of the argument </code>mass_storage_id</code> of class <code>CommonState</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGESTATELISTCHANGED_NAME; /**< Key of the argument </code>name</code> of class <code>CommonState</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGEINFOSTATELISTCHANGED_MASS_STORAGE_ID; /**< Key of the argument </code>mass_storage_id</code> of class <code>CommonState</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGEINFOSTATELISTCHANGED_SIZE; /**< Key of the argument </code>size</code> of class <code>CommonState</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGEINFOSTATELISTCHANGED_USED_SIZE; /**< Key of the argument </code>used_size</code> of class <code>CommonState</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGEINFOSTATELISTCHANGED_PLUGGED; /**< Key of the argument </code>plugged</code> of class <code>CommonState</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGEINFOSTATELISTCHANGED_FULL; /**< Key of the argument </code>full</code> of class <code>CommonState</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGEINFOSTATELISTCHANGED_INTERNAL; /**< Key of the argument </code>internal</code> of class <code>CommonState</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_CURRENTDATECHANGED_DATE; /**< Key of the argument </code>date</code> of class <code>CommonState</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_CURRENTTIMECHANGED_TIME; /**< Key of the argument </code>time</code> of class <code>CommonState</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGEINFOREMAININGLISTCHANGED_FREE_SPACE; /**< Key of the argument </code>free_space</code> of class <code>CommonState</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGEINFOREMAININGLISTCHANGED_REC_TIME; /**< Key of the argument </code>rec_time</code> of class <code>CommonState</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGEINFOREMAININGLISTCHANGED_PHOTO_REMAINING; /**< Key of the argument </code>photo_remaining</code> of class <code>CommonState</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_WIFISIGNALCHANGED_RSSI; /**< Key of the argument </code>rssi</code> of class <code>CommonState</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_SENSORSSTATESLISTCHANGED_SENSORNAME; /**< Key of the argument </code>sensorName</code> of class <code>CommonState</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_SENSORSSTATESLISTCHANGED_SENSORSTATE; /**< Key of the argument </code>sensorState</code> of class <code>CommonState</code> in feature <code>Common</code> */

/**
 * class: OverHeat 
 * Over heat commands
 */


/**
 * @brief Send a command <code>SwitchOff</code> of class <code>OverHeat</code> in feature <code>Common</code>
 * @deprecated
 * Switch off the drone when a overheat appeared
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendOverHeatSwitchOff_t) (ARCONTROLLER_FEATURE_Common_t *feature);

/**
 * @brief Send a command <code>Ventilate</code> of class <code>OverHeat</code> in feature <code>Common</code>
 * @deprecated
 * Ventilate the drone when a overheat appeared
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendOverHeatVentilate_t) (ARCONTROLLER_FEATURE_Common_t *feature);

/**
 * class: OverHeatState 
 * Overheat state from product
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_OVERHEATSTATE_OVERHEATREGULATIONCHANGED_REGULATIONTYPE; /**< Key of the argument </code>regulationType</code> of class <code>OverHeatState</code> in feature <code>Common</code> */

/**
 * class: ControllerState 
 * Notify the device about the state of the controller application.
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_CONTROLLERSTATE_ISPILOTINGCHANGED_PILOTING; /**< Key of the argument </code>piloting</code> of class <code>ControllerState</code> in feature <code>Common</code> */

/**
 * class: WifiSettings 
 * Wifi settings commands
 */


/**
 * @brief Send a command <code>OutdoorSetting</code> of class <code>WifiSettings</code> in feature <code>Common</code>
 * Send to product if it should use its outdoor wifi config, or indoor
 * @param feature feature owning the commands
 * @param outdoor 1 if it should use outdoor wifi settings, 0 otherwise
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendWifiSettingsOutdoorSetting_t) (ARCONTROLLER_FEATURE_Common_t *feature, uint8_t outdoor);

/**
 * class: WifiSettingsState 
 * Wifi settings state from product
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_WIFISETTINGSSTATE_OUTDOORSETTINGSCHANGED_OUTDOOR; /**< Key of the argument </code>outdoor</code> of class <code>WifiSettingsState</code> in feature <code>Common</code> */

/**
 * class: Mavlink 
 * Mavlink flight plans commands
 */


/**
 * @brief Send a command <code>Start</code> of class <code>Mavlink</code> in feature <code>Common</code>
 * Start the flight plan
 * @param feature feature owning the commands
 * @param filepath flight plan file path from the mavlink ftp root
 * @param type type of the played mavlink file
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendMavlinkStart_t) (ARCONTROLLER_FEATURE_Common_t *feature, char * filepath, eARCOMMANDS_COMMON_MAVLINK_START_TYPE type);

/**
 * @brief Send a command <code>Pause</code> of class <code>Mavlink</code> in feature <code>Common</code>
 * Pause the flightplan (can be restarted with a start)
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendMavlinkPause_t) (ARCONTROLLER_FEATURE_Common_t *feature);

/**
 * @brief Send a command <code>Stop</code> of class <code>Mavlink</code> in feature <code>Common</code>
 * Stop the flightplan
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendMavlinkStop_t) (ARCONTROLLER_FEATURE_Common_t *feature);

/**
 * class: MavlinkState 
 * Mavlink flight plans states commands
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_STATE; /**< Key of the argument </code>state</code> of class <code>MavlinkState</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_FILEPATH; /**< Key of the argument </code>filepath</code> of class <code>MavlinkState</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_TYPE; /**< Key of the argument </code>type</code> of class <code>MavlinkState</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_MAVLINKSTATE_MAVLINKPLAYERRORSTATECHANGED_ERROR; /**< Key of the argument </code>error</code> of class <code>MavlinkState</code> in feature <code>Common</code> */

/**
 * class: Calibration 
 * Calibration commands
 */


/**
 * @brief Send a command <code>MagnetoCalibration</code> of class <code>Calibration</code> in feature <code>Common</code>
 * Sent when a calibration of the magnetometer is asked or is aborted
 * @param feature feature owning the commands
 * @param calibrate 1 if the calibration should be started, 0 if it should be aborted
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendCalibrationMagnetoCalibration_t) (ARCONTROLLER_FEATURE_Common_t *feature, uint8_t calibrate);

/**
 * class: CalibrationState 
 * Status of the calibration
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATECHANGED_XAXISCALIBRATION; /**< Key of the argument </code>xAxisCalibration</code> of class <code>CalibrationState</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATECHANGED_YAXISCALIBRATION; /**< Key of the argument </code>yAxisCalibration</code> of class <code>CalibrationState</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATECHANGED_ZAXISCALIBRATION; /**< Key of the argument </code>zAxisCalibration</code> of class <code>CalibrationState</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATECHANGED_CALIBRATIONFAILED; /**< Key of the argument </code>calibrationFailed</code> of class <code>CalibrationState</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONREQUIREDSTATE_REQUIRED; /**< Key of the argument </code>required</code> of class <code>CalibrationState</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONAXISTOCALIBRATECHANGED_AXIS; /**< Key of the argument </code>axis</code> of class <code>CalibrationState</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTARTEDCHANGED_STARTED; /**< Key of the argument </code>started</code> of class <code>CalibrationState</code> in feature <code>Common</code> */

/**
 * class: CameraSettingsState 
 * Status of the camera settings
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_CAMERASETTINGSSTATE_CAMERASETTINGSCHANGED_FOV; /**< Key of the argument </code>fov</code> of class <code>CameraSettingsState</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_CAMERASETTINGSSTATE_CAMERASETTINGSCHANGED_PANMAX; /**< Key of the argument </code>panMax</code> of class <code>CameraSettingsState</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_CAMERASETTINGSSTATE_CAMERASETTINGSCHANGED_PANMIN; /**< Key of the argument </code>panMin</code> of class <code>CameraSettingsState</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_CAMERASETTINGSSTATE_CAMERASETTINGSCHANGED_TILTMAX; /**< Key of the argument </code>tiltMax</code> of class <code>CameraSettingsState</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_CAMERASETTINGSSTATE_CAMERASETTINGSCHANGED_TILTMIN; /**< Key of the argument </code>tiltMin</code> of class <code>CameraSettingsState</code> in feature <code>Common</code> */

/**
 * class: GPS 
 * GPS related commands
 */


/**
 * @brief Send a command <code>ControllerPositionForRun</code> of class <code>GPS</code> in feature <code>Common</code>
 * Set the controller position for a run. This command is used by all non gps products. Watch out, this command cannot be used with BLE products
 * @param feature feature owning the commands
 * @param latitude Controller latitude in decimal degrees
 * @param longitude Controller longitude in decimal degrees
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendGPSControllerPositionForRun_t) (ARCONTROLLER_FEATURE_Common_t *feature, double latitude, double longitude);

/**
 * class: FlightPlanState 
 * FlightPlan state commands
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_FLIGHTPLANSTATE_AVAILABILITYSTATECHANGED_AVAILABILITYSTATE; /**< Key of the argument </code>AvailabilityState</code> of class <code>FlightPlanState</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_FLIGHTPLANSTATE_COMPONENTSTATELISTCHANGED_COMPONENT; /**< Key of the argument </code>component</code> of class <code>FlightPlanState</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_FLIGHTPLANSTATE_COMPONENTSTATELISTCHANGED_STATE; /**< Key of the argument </code>State</code> of class <code>FlightPlanState</code> in feature <code>Common</code> */

/**
 * class: FlightPlanEvent 
 * FlightPlan Event commands
 */


/**
 * class: ARLibsVersionsState 
 * ARlibs Versions Commands
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_ARLIBSVERSIONSSTATE_CONTROLLERLIBARCOMMANDSVERSION_VERSION; /**< Key of the argument </code>version</code> of class <code>ARLibsVersionsState</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_ARLIBSVERSIONSSTATE_SKYCONTROLLERLIBARCOMMANDSVERSION_VERSION; /**< Key of the argument </code>version</code> of class <code>ARLibsVersionsState</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_ARLIBSVERSIONSSTATE_DEVICELIBARCOMMANDSVERSION_VERSION; /**< Key of the argument </code>version</code> of class <code>ARLibsVersionsState</code> in feature <code>Common</code> */

/**
 * @brief Feature controller allow to send command related of common Feature.
 * All common commands shared between all projects
 */
struct ARCONTROLLER_FEATURE_Common_t
{
    ARCONTROLLER_FEATURE_Common_SendNetworkDisconnect_t sendNetworkDisconnect;
    ARCONTROLLER_FEATURE_Common_SendSettingsAllSettings_t sendSettingsAllSettings;
    ARCONTROLLER_FEATURE_Common_SendSettingsReset_t sendSettingsReset;
    ARCONTROLLER_FEATURE_Common_SendSettingsProductName_t sendSettingsProductName;
    ARCONTROLLER_FEATURE_Common_SendSettingsCountry_t sendSettingsCountry;
    ARCONTROLLER_FEATURE_Common_SendSettingsAutoCountry_t sendSettingsAutoCountry;
    ARCONTROLLER_FEATURE_Common_SendCommonAllStates_t sendCommonAllStates;
    ARCONTROLLER_FEATURE_Common_SendCommonCurrentDate_t sendCommonCurrentDate;
    ARCONTROLLER_FEATURE_Common_SendCommonCurrentTime_t sendCommonCurrentTime;
    ARCONTROLLER_FEATURE_Common_SendCommonReboot_t sendCommonReboot;
    ARCONTROLLER_FEATURE_Common_SendOverHeatSwitchOff_t sendOverHeatSwitchOff;
    ARCONTROLLER_FEATURE_Common_SendOverHeatVentilate_t sendOverHeatVentilate;
    ARCONTROLLER_FEATURE_Common_SendWifiSettingsOutdoorSetting_t sendWifiSettingsOutdoorSetting;
    ARCONTROLLER_FEATURE_Common_SendMavlinkStart_t sendMavlinkStart;
    ARCONTROLLER_FEATURE_Common_SendMavlinkPause_t sendMavlinkPause;
    ARCONTROLLER_FEATURE_Common_SendMavlinkStop_t sendMavlinkStop;
    ARCONTROLLER_FEATURE_Common_SendCalibrationMagnetoCalibration_t sendCalibrationMagnetoCalibration;
    ARCONTROLLER_FEATURE_Common_SendGPSControllerPositionForRun_t sendGPSControllerPositionForRun;
    ARCONTROLLER_FEATURE_Common_Private_t *privatePart; /**< Private part of ARCONTROLLER_FEATURE_Common_t */
};

/**
 * @brief Set a NetworkController to use to send commands.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] networkController The networkController used to send commands ; must be not NULL.
 * @return error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Common_SetNetworkController (ARCONTROLLER_FEATURE_Common_t *feature, ARCONTROLLER_Network_t *networkController);

/**
 * @brief Get the elements of a command received.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command.
 * @param[out] error executing error.
 * @return Element dictionary of the command ; Can be null if an error is occurred.
 */
ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_GetCommandElements (ARCONTROLLER_FEATURE_Common_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, eARCONTROLLER_ERROR *error);

/*******************************
 * --- FEATURE commonDebug --- 
 ******************************/

/**
 * @brief Private part of ARCONTROLLER_FEATURE_CommonDebug_t.
 */
typedef struct ARCONTROLLER_FEATURE_CommonDebug_Private_t ARCONTROLLER_FEATURE_CommonDebug_Private_t;

/**
 * @brief Feature controller allow to send command related of commonDebug Feature.
 * All debug commands shared between all projects
 */
typedef struct ARCONTROLLER_FEATURE_CommonDebug_t ARCONTROLLER_FEATURE_CommonDebug_t;

/**
 * @brief Create a new commonDebug Feature Controller
 * @warning This function allocate memory
 * @post ARCONTROLLER_FEATURE_CommonDebug_Delete() must be called to delete the Feature Controller and free the memory allocated.
 * @param[in] networkController The networkController used to send commands ; can be NULL and defind later with ARCONTROLLER_FEATURE_CommonDebug_SetNetworkController().
 * @param[out] error executing error.
 * @return the new commonDebug Feature Controller
 * @see ARCONTROLLER_FEATURE_CommonDebug_Delete
 */
ARCONTROLLER_FEATURE_CommonDebug_t *ARCONTROLLER_FEATURE_CommonDebug_New (ARCONTROLLER_Network_t *networkController, eARCONTROLLER_ERROR *error);

/**
 * @brief Delete the commonDebug Feature Controller
 * @warning This function free memory
 * @param feature The feature controller to delete
 * @see ARCONTROLLER_FEATURE_CommonDebug_New
 */
void ARCONTROLLER_FEATURE_CommonDebug_Delete (ARCONTROLLER_FEATURE_CommonDebug_t **feature);

/**
 * @brief Get the dictionay of the commonDebug Feature Controller
 * @param feature The feature controller owning the dictionary to get
 * @param[out] error executing error.
 */
ARCONTROLLER_DICTIONARY_COMMANDS_t *ARCONTROLLER_FEATURE_CommonDebug_GetDictionary (ARCONTROLLER_FEATURE_CommonDebug_t *feature, eARCONTROLLER_ERROR *error);

/**
 * @brief Add a callback to use when a command in project <code>CommonDebug</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] callback the callback to add.
 * @param[in] commandKey Key of the command which the callback must be associated.
 * @param[out] error executing error.
 * @param[int] customData custom data given as parameter to the callback.
 * @see ARCONTROLLER_FEATURE_CommonDebug_RemoveCallback.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_CommonDebug_AddCallback (ARCONTROLLER_FEATURE_CommonDebug_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

/**
 * @brief Remove a callback used when a command in project <code>CommonDebug</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] callback the callback to remove.
 * @param[int] customData The custom data given to the register.
 * @param[out] error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_CommonDebug_RemoveCallback (ARCONTROLLER_FEATURE_CommonDebug_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

/**
 * class: Stats 
 * Commands to make stats
 */


/**
 * @brief Send a command <code>SendPacket</code> of class <code>Stats</code> in feature <code>CommonDebug</code>
 * Send a packet to the drone
 * @param feature feature owning the commands
 * @param packet Packet to send to the drone
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_CommonDebug_SendStatsSendPacket_t) (ARCONTROLLER_FEATURE_CommonDebug_t *feature, char * packet);

/**
 * @brief Send a command <code>StartSendingPacketFromDrone</code> of class <code>Stats</code> in feature <code>CommonDebug</code>
 * Ask drone to start sending packets
 * @param feature feature owning the commands
 * @param frequency Frequency of the packet
 * @param packetSize Size of the the packet
 * @param date time of day in sec
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_CommonDebug_SendStatsStartSendingPacketFromDrone_t) (ARCONTROLLER_FEATURE_CommonDebug_t *feature, uint8_t frequency, uint8_t packetSize, uint32_t date);

/**
 * @brief Send a command <code>StopSendingPacketFromDrone</code> of class <code>Stats</code> in feature <code>CommonDebug</code>
 * Ask drone to stop sending packets
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_CommonDebug_SendStatsStopSendingPacketFromDrone_t) (ARCONTROLLER_FEATURE_CommonDebug_t *feature);

/**
 * class: StatsEvent 
 * Stats Event from drone
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMONDEBUG_STATSEVENT_SENDPACKET_PACKET; /**< Key of the argument </code>packet</code> of class <code>StatsEvent</code> in feature <code>CommonDebug</code> */

/**
 * @brief Feature controller allow to send command related of commonDebug Feature.
 * All debug commands shared between all projects
 */
struct ARCONTROLLER_FEATURE_CommonDebug_t
{
    ARCONTROLLER_FEATURE_CommonDebug_SendStatsSendPacket_t sendStatsSendPacket;
    ARCONTROLLER_FEATURE_CommonDebug_SendStatsStartSendingPacketFromDrone_t sendStatsStartSendingPacketFromDrone;
    ARCONTROLLER_FEATURE_CommonDebug_SendStatsStopSendingPacketFromDrone_t sendStatsStopSendingPacketFromDrone;
    ARCONTROLLER_FEATURE_CommonDebug_Private_t *privatePart; /**< Private part of ARCONTROLLER_FEATURE_CommonDebug_t */
};

/**
 * @brief Set a NetworkController to use to send commands.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] networkController The networkController used to send commands ; must be not NULL.
 * @return error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_CommonDebug_SetNetworkController (ARCONTROLLER_FEATURE_CommonDebug_t *feature, ARCONTROLLER_Network_t *networkController);

/**
 * @brief Get the elements of a command received.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command.
 * @param[out] error executing error.
 * @return Element dictionary of the command ; Can be null if an error is occurred.
 */
ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_CommonDebug_GetCommandElements (ARCONTROLLER_FEATURE_CommonDebug_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, eARCONTROLLER_ERROR *error);

/*******************************
 * --- FEATURE JumpingSumo --- 
 ******************************/

/**
 * @brief Private part of ARCONTROLLER_FEATURE_JumpingSumo_t.
 */
typedef struct ARCONTROLLER_FEATURE_JumpingSumo_Private_t ARCONTROLLER_FEATURE_JumpingSumo_Private_t;

/**
 * @brief Feature controller allow to send command related of JumpingSumo Feature.
 * All commands specific to the Jumping Sumo.
 */
typedef struct ARCONTROLLER_FEATURE_JumpingSumo_t ARCONTROLLER_FEATURE_JumpingSumo_t;

/**
 * @brief Create a new JumpingSumo Feature Controller
 * @warning This function allocate memory
 * @post ARCONTROLLER_FEATURE_JumpingSumo_Delete() must be called to delete the Feature Controller and free the memory allocated.
 * @param[in] networkController The networkController used to send commands ; can be NULL and defind later with ARCONTROLLER_FEATURE_JumpingSumo_SetNetworkController().
 * @param[out] error executing error.
 * @return the new JumpingSumo Feature Controller
 * @see ARCONTROLLER_FEATURE_JumpingSumo_Delete
 */
ARCONTROLLER_FEATURE_JumpingSumo_t *ARCONTROLLER_FEATURE_JumpingSumo_New (ARCONTROLLER_Network_t *networkController, eARCONTROLLER_ERROR *error);

/**
 * @brief Delete the JumpingSumo Feature Controller
 * @warning This function free memory
 * @param feature The feature controller to delete
 * @see ARCONTROLLER_FEATURE_JumpingSumo_New
 */
void ARCONTROLLER_FEATURE_JumpingSumo_Delete (ARCONTROLLER_FEATURE_JumpingSumo_t **feature);

/**
 * @brief Get the dictionay of the JumpingSumo Feature Controller
 * @param feature The feature controller owning the dictionary to get
 * @param[out] error executing error.
 */
ARCONTROLLER_DICTIONARY_COMMANDS_t *ARCONTROLLER_FEATURE_JumpingSumo_GetDictionary (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCONTROLLER_ERROR *error);

/**
 * @brief Add a callback to use when a command in project <code>JumpingSumo</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] callback the callback to add.
 * @param[in] commandKey Key of the command which the callback must be associated.
 * @param[out] error executing error.
 * @param[int] customData custom data given as parameter to the callback.
 * @see ARCONTROLLER_FEATURE_JumpingSumo_RemoveCallback.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_JumpingSumo_AddCallback (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

/**
 * @brief Remove a callback used when a command in project <code>JumpingSumo</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] callback the callback to remove.
 * @param[int] customData The custom data given to the register.
 * @param[out] error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_JumpingSumo_RemoveCallback (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

/**
 * class: Piloting 
 * All commands related to piloting the JumpingSumo
 */


/**
 * @brief Send a command <code>PCMD</code> of class <code>Piloting</code> in feature <code>JumpingSumo</code>
 * Ask the JS speed and turn ratio.
 * @param feature feature owning the commands
 * @param flag Boolean for "touch screen".
 * @param speed Speed value [-100:100].
 * @param turn Turn value. [-100:100]
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendPilotingPCMD_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, uint8_t flag, int8_t speed, int8_t turn);

/**
 * @brief Set the parameters to send through the command <code>PCMD</code> of class <code>Piloting</code> in project <code>JumpingSumo</code>
 * Ask the JS speed and turn ratio.
 * @param feature feature owning the commands
 * @param flag Boolean for "touch screen".
 * @param speed Speed value [-100:100].
 * @param turn Turn value. [-100:100]
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SetPilotingPCMD_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, uint8_t flag, int8_t speed, int8_t turn);

/**
 * @brief Send the a command <code>PCMD</code> of class <code>Piloting</code> in project <code>JumpingSumo</code> with the parame set beforehand 
 * Ask the JS speed and turn ratio.
 * @param feature feature owning the commands
 * @param cmdBuffer buffer to store the command
 * @param cmdBufferSize size of the buffer
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_JumpingSumo_SendPilotingPCMDStruct (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, uint8_t *cmdBuffer, int32_t cmdBufferSize);

/**
 * @brief Set flag sent through the command <code>PCMD</code> of class <code>Piloting</code> in project <code>JumpingSumo</code>
 * Ask the JS speed and turn ratio.
 * @param feature feature owning the commands
 * @param flag Boolean for "touch screen".
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SetPilotingPCMDFlag_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, uint8_t flag);

/**
 * @brief Set speed sent through the command <code>PCMD</code> of class <code>Piloting</code> in project <code>JumpingSumo</code>
 * Ask the JS speed and turn ratio.
 * @param feature feature owning the commands
 * @param speed Speed value [-100:100].
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SetPilotingPCMDSpeed_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, int8_t speed);

/**
 * @brief Set turn sent through the command <code>PCMD</code> of class <code>Piloting</code> in project <code>JumpingSumo</code>
 * Ask the JS speed and turn ratio.
 * @param feature feature owning the commands
 * @param turn Turn value. [-100:100]
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SetPilotingPCMDTurn_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, int8_t turn);

/**
 * @brief Send a command <code>Posture</code> of class <code>Piloting</code> in feature <code>JumpingSumo</code>
 * Request a posture
 * @param feature feature owning the commands
 * @param type Type of Posture
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendPilotingPosture_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_PILOTING_POSTURE_TYPE type);

/**
 * @brief Send a command <code>AddCapOffset</code> of class <code>Piloting</code> in feature <code>JumpingSumo</code>
 * Add the specified offset to the current cap.
 * @param feature feature owning the commands
 * @param offset Offset value in radians.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendPilotingAddCapOffset_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, float offset);

/**
 * class: PilotingState 
 * Animations state from JS.
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_PILOTINGSTATE_POSTURECHANGED_STATE; /**< Key of the argument </code>state</code> of class <code>PilotingState</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_PILOTINGSTATE_ALERTSTATECHANGED_STATE; /**< Key of the argument </code>state</code> of class <code>PilotingState</code> in feature <code>JumpingSumo</code> */

/**
 * class: Animations 
 * Animation commands
 */


/**
 * @brief Send a command <code>JumpStop</code> of class <code>Animations</code> in feature <code>JumpingSumo</code>
 * Stop jump, emergency jump stop, stop jump motor and stay there.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendAnimationsJumpStop_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature);

/**
 * @brief Send a command <code>JumpCancel</code> of class <code>Animations</code> in feature <code>JumpingSumo</code>
 * Cancel jump and come back to previous state (if possible).
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendAnimationsJumpCancel_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature);

/**
 * @brief Send a command <code>JumpLoad</code> of class <code>Animations</code> in feature <code>JumpingSumo</code>
 * Request jump loading
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendAnimationsJumpLoad_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature);

/**
 * @brief Send a command <code>Jump</code> of class <code>Animations</code> in feature <code>JumpingSumo</code>
 * Request a jump
 * @param feature feature owning the commands
 * @param type Type of jump
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendAnimationsJump_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_ANIMATIONS_JUMP_TYPE type);

/**
 * @brief Send a command <code>SimpleAnimation</code> of class <code>Animations</code> in feature <code>JumpingSumo</code>
 * Play a parameterless animation.
 * @param feature feature owning the commands
 * @param id Animation ID.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendAnimationsSimpleAnimation_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID id);

/**
 * class: AnimationsState 
 * Animations state from JS.
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_ANIMATIONSSTATE_JUMPLOADCHANGED_STATE; /**< Key of the argument </code>state</code> of class <code>AnimationsState</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_ANIMATIONSSTATE_JUMPTYPECHANGED_STATE; /**< Key of the argument </code>state</code> of class <code>AnimationsState</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_ANIMATIONSSTATE_JUMPMOTORPROBLEMCHANGED_ERROR; /**< Key of the argument </code>error</code> of class <code>AnimationsState</code> in feature <code>JumpingSumo</code> */

/**
 * class: Settings 
 * Settings commands
 */


/**
 * class: SettingsState 
 * Settings state from product
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_SETTINGSSTATE_PRODUCTGPSVERSIONCHANGED_SOFTWARE; /**< Key of the argument </code>software</code> of class <code>SettingsState</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_SETTINGSSTATE_PRODUCTGPSVERSIONCHANGED_HARDWARE; /**< Key of the argument </code>hardware</code> of class <code>SettingsState</code> in feature <code>JumpingSumo</code> */

/**
 * class: MediaRecord 
 * Media recording management
 */


/**
 * @brief Send a command <code>Picture</code> of class <code>MediaRecord</code> in feature <code>JumpingSumo</code>
 * @deprecated
 * Take picture
 * @param feature feature owning the commands
 * @param mass_storage_id Mass storage id to take picture
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendMediaRecordPicture_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, uint8_t mass_storage_id);

/**
 * @brief Send a command <code>Video</code> of class <code>MediaRecord</code> in feature <code>JumpingSumo</code>
 * @deprecated
 * Video record
 * @param feature feature owning the commands
 * @param record Command to record video
 * @param mass_storage_id Mass storage id to record
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendMediaRecordVideo_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_MEDIARECORD_VIDEO_RECORD record, uint8_t mass_storage_id);

/**
 * @brief Send a command <code>PictureV2</code> of class <code>MediaRecord</code> in feature <code>JumpingSumo</code>
 * Take picture
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendMediaRecordPictureV2_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature);

/**
 * @brief Send a command <code>VideoV2</code> of class <code>MediaRecord</code> in feature <code>JumpingSumo</code>
 * Video record
 * @param feature feature owning the commands
 * @param record Command to record video
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendMediaRecordVideoV2_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_MEDIARECORD_VIDEOV2_RECORD record);

/**
 * class: MediaRecordState 
 * State of media recording
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGED_STATE; /**< Key of the argument </code>state</code> of class <code>MediaRecordState</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGED_MASS_STORAGE_ID; /**< Key of the argument </code>mass_storage_id</code> of class <code>MediaRecordState</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE; /**< Key of the argument </code>state</code> of class <code>MediaRecordState</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGED_MASS_STORAGE_ID; /**< Key of the argument </code>mass_storage_id</code> of class <code>MediaRecordState</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE; /**< Key of the argument </code>state</code> of class <code>MediaRecordState</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR; /**< Key of the argument </code>error</code> of class <code>MediaRecordState</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE; /**< Key of the argument </code>state</code> of class <code>MediaRecordState</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR; /**< Key of the argument </code>error</code> of class <code>MediaRecordState</code> in feature <code>JumpingSumo</code> */

/**
 * class: MediaRecordEvent 
 * Events of media recording
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT; /**< Key of the argument </code>event</code> of class <code>MediaRecordEvent</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR; /**< Key of the argument </code>error</code> of class <code>MediaRecordEvent</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT; /**< Key of the argument </code>event</code> of class <code>MediaRecordEvent</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR; /**< Key of the argument </code>error</code> of class <code>MediaRecordEvent</code> in feature <code>JumpingSumo</code> */

/**
 * class: NetworkSettings 
 * Network settings commands
 */


/**
 * @brief Send a command <code>WifiSelection</code> of class <code>NetworkSettings</code> in feature <code>JumpingSumo</code>
 * Auto-select channel of choosen band
 * @param feature feature owning the commands
 * @param type The type of wifi selection (auto, manual)
 * @param band The allowed band(s) : 2.4 Ghz, 5 Ghz, or all
 * @param channel The channel (not used in auto mode)
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendNetworkSettingsWifiSelection_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGS_WIFISELECTION_TYPE type, eARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGS_WIFISELECTION_BAND band, uint8_t channel);

/**
 * class: NetworkSettingsState 
 * Network settings state from product
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE; /**< Key of the argument </code>type</code> of class <code>NetworkSettingsState</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND; /**< Key of the argument </code>band</code> of class <code>NetworkSettingsState</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_CHANNEL; /**< Key of the argument </code>channel</code> of class <code>NetworkSettingsState</code> in feature <code>JumpingSumo</code> */

/**
 * class: Network 
 * Network related commands
 */


/**
 * @brief Send a command <code>WifiScan</code> of class <code>Network</code> in feature <code>JumpingSumo</code>
 * Launches wifi network scan
 * @param feature feature owning the commands
 * @param band The band(s) : 2.4 Ghz, 5 Ghz, or both
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendNetworkWifiScan_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_NETWORK_WIFISCAN_BAND band);

/**
 * @brief Send a command <code>WifiAuthChannel</code> of class <code>Network</code> in feature <code>JumpingSumo</code>
 * Controller inquire the list of authorized wifi channels.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendNetworkWifiAuthChannel_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature);

/**
 * class: NetworkState 
 * Network state from Product
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_NETWORKSTATE_WIFISCANLISTCHANGED_SSID; /**< Key of the argument </code>ssid</code> of class <code>NetworkState</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_NETWORKSTATE_WIFISCANLISTCHANGED_RSSI; /**< Key of the argument </code>rssi</code> of class <code>NetworkState</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_NETWORKSTATE_WIFISCANLISTCHANGED_BAND; /**< Key of the argument </code>band</code> of class <code>NetworkState</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_NETWORKSTATE_WIFISCANLISTCHANGED_CHANNEL; /**< Key of the argument </code>channel</code> of class <code>NetworkState</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND; /**< Key of the argument </code>band</code> of class <code>NetworkState</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_CHANNEL; /**< Key of the argument </code>channel</code> of class <code>NetworkState</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_IN_OR_OUT; /**< Key of the argument </code>in_or_out</code> of class <code>NetworkState</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_NETWORKSTATE_LINKQUALITYCHANGED_QUALITY; /**< Key of the argument </code>quality</code> of class <code>NetworkState</code> in feature <code>JumpingSumo</code> */

/**
 * class: AudioSettings 
 * Audio settings.
 */


/**
 * @brief Send a command <code>MasterVolume</code> of class <code>AudioSettings</code> in feature <code>JumpingSumo</code>
 * Master volume control.
 * @param feature feature owning the commands
 * @param volume Master audio volume [0:100].
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendAudioSettingsMasterVolume_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, uint8_t volume);

/**
 * @brief Send a command <code>Theme</code> of class <code>AudioSettings</code> in feature <code>JumpingSumo</code>
 * Audio Theme.
 * @param feature feature owning the commands
 * @param theme The audio theme to set.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendAudioSettingsTheme_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGS_THEME_THEME theme);

/**
 * class: AudioSettingsState 
 * Audio settings state.
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_AUDIOSETTINGSSTATE_MASTERVOLUMECHANGED_VOLUME; /**< Key of the argument </code>volume</code> of class <code>AudioSettingsState</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_AUDIOSETTINGSSTATE_THEMECHANGED_THEME; /**< Key of the argument </code>theme</code> of class <code>AudioSettingsState</code> in feature <code>JumpingSumo</code> */

/**
 * class: RoadPlan 
 * RoadPlan commands.
 */


/**
 * @brief Send a command <code>AllScriptsMetadata</code> of class <code>RoadPlan</code> in feature <code>JumpingSumo</code>
 * Command to ask device all metadata scripts.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendRoadPlanAllScriptsMetadata_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature);

/**
 * @brief Send a command <code>ScriptUploaded</code> of class <code>RoadPlan</code> in feature <code>JumpingSumo</code>
 * Notify device that a new file has been uploaded.
 * @param feature feature owning the commands
 * @param uuid UUID of uploaded file.
 * @param md5Hash MD5 hash code computed over file.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendRoadPlanScriptUploaded_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, char * uuid, char * md5Hash);

/**
 * @brief Send a command <code>ScriptDelete</code> of class <code>RoadPlan</code> in feature <code>JumpingSumo</code>
 * Ask the device to delete a script.
 * @param feature feature owning the commands
 * @param uuid UUID of the file to delete.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendRoadPlanScriptDelete_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, char * uuid);

/**
 * @brief Send a command <code>PlayScript</code> of class <code>RoadPlan</code> in feature <code>JumpingSumo</code>
 * Ask the device to play a script.
 * @param feature feature owning the commands
 * @param uuid UUID of the file to play.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendRoadPlanPlayScript_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, char * uuid);

/**
 * class: RoadPlanState 
 * RoadPlan command responses.
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_ROADPLANSTATE_SCRIPTMETADATALISTCHANGED_UUID; /**< Key of the argument </code>uuid</code> of class <code>RoadPlanState</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_ROADPLANSTATE_SCRIPTMETADATALISTCHANGED_VERSION; /**< Key of the argument </code>version</code> of class <code>RoadPlanState</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_ROADPLANSTATE_SCRIPTMETADATALISTCHANGED_PRODUCT; /**< Key of the argument </code>product</code> of class <code>RoadPlanState</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_ROADPLANSTATE_SCRIPTMETADATALISTCHANGED_NAME; /**< Key of the argument </code>name</code> of class <code>RoadPlanState</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_ROADPLANSTATE_SCRIPTMETADATALISTCHANGED_LASTMODIFIED; /**< Key of the argument </code>lastModified</code> of class <code>RoadPlanState</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_ROADPLANSTATE_SCRIPTUPLOADCHANGED_RESULTCODE; /**< Key of the argument </code>resultCode</code> of class <code>RoadPlanState</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_ROADPLANSTATE_SCRIPTDELETECHANGED_RESULTCODE; /**< Key of the argument </code>resultCode</code> of class <code>RoadPlanState</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_ROADPLANSTATE_PLAYSCRIPTCHANGED_RESULTCODE; /**< Key of the argument </code>resultCode</code> of class <code>RoadPlanState</code> in feature <code>JumpingSumo</code> */

/**
 * class: SpeedSettings 
 * Speed Settings commands
 */


/**
 * @brief Send a command <code>Outdoor</code> of class <code>SpeedSettings</code> in feature <code>JumpingSumo</code>
 * Outdoor property => CAUTION : USED FOR WIFI, to know authorized wifi channels.
 * @param feature feature owning the commands
 * @param outdoor 1 if outdoor, 0 if indoor
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendSpeedSettingsOutdoor_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, uint8_t outdoor);

/**
 * class: SpeedSettingsState 
 * Speed Settings state from product
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_SPEEDSETTINGSSTATE_OUTDOORCHANGED_OUTDOOR; /**< Key of the argument </code>outdoor</code> of class <code>SpeedSettingsState</code> in feature <code>JumpingSumo</code> */

/**
 * class: MediaStreaming 
 * Control media streaming behavior.
 */


/**
 * @brief Send a command <code>VideoEnable</code> of class <code>MediaStreaming</code> in feature <code>JumpingSumo</code>
 * Enable/disable video streaming.
 * @param feature feature owning the commands
 * @param enable 1 to enable, 0 to disable.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendMediaStreamingVideoEnable_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, uint8_t enable);

/**
 * class: MediaStreamingState 
 * Media streaming status.
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED; /**< Key of the argument </code>enabled</code> of class <code>MediaStreamingState</code> in feature <code>JumpingSumo</code> */

/**
 * @brief Feature controller allow to send command related of JumpingSumo Feature.
 * All commands specific to the Jumping Sumo.
 */
struct ARCONTROLLER_FEATURE_JumpingSumo_t
{
    ARCONTROLLER_FEATURE_JumpingSumo_SendPilotingPCMD_t sendPilotingPCMD;
    ARCONTROLLER_FEATURE_JumpingSumo_SetPilotingPCMD_t setPilotingPCMD;
    ARCONTROLLER_FEATURE_JumpingSumo_SetPilotingPCMDFlag_t setPilotingPCMDFlag; /**< Send a command <code>PCMD</code> of class <code>Piloting</code> in feature <code>JumpingSumo</code>. */
    ARCONTROLLER_FEATURE_JumpingSumo_SetPilotingPCMDSpeed_t setPilotingPCMDSpeed; /**< Send a command <code>PCMD</code> of class <code>Piloting</code> in feature <code>JumpingSumo</code>. */
    ARCONTROLLER_FEATURE_JumpingSumo_SetPilotingPCMDTurn_t setPilotingPCMDTurn; /**< Send a command <code>PCMD</code> of class <code>Piloting</code> in feature <code>JumpingSumo</code>. */
    ARCONTROLLER_FEATURE_JumpingSumo_SendPilotingPosture_t sendPilotingPosture;
    ARCONTROLLER_FEATURE_JumpingSumo_SendPilotingAddCapOffset_t sendPilotingAddCapOffset;
    ARCONTROLLER_FEATURE_JumpingSumo_SendAnimationsJumpStop_t sendAnimationsJumpStop;
    ARCONTROLLER_FEATURE_JumpingSumo_SendAnimationsJumpCancel_t sendAnimationsJumpCancel;
    ARCONTROLLER_FEATURE_JumpingSumo_SendAnimationsJumpLoad_t sendAnimationsJumpLoad;
    ARCONTROLLER_FEATURE_JumpingSumo_SendAnimationsJump_t sendAnimationsJump;
    ARCONTROLLER_FEATURE_JumpingSumo_SendAnimationsSimpleAnimation_t sendAnimationsSimpleAnimation;
    ARCONTROLLER_FEATURE_JumpingSumo_SendMediaRecordPicture_t sendMediaRecordPicture;
    ARCONTROLLER_FEATURE_JumpingSumo_SendMediaRecordVideo_t sendMediaRecordVideo;
    ARCONTROLLER_FEATURE_JumpingSumo_SendMediaRecordPictureV2_t sendMediaRecordPictureV2;
    ARCONTROLLER_FEATURE_JumpingSumo_SendMediaRecordVideoV2_t sendMediaRecordVideoV2;
    ARCONTROLLER_FEATURE_JumpingSumo_SendNetworkSettingsWifiSelection_t sendNetworkSettingsWifiSelection;
    ARCONTROLLER_FEATURE_JumpingSumo_SendNetworkWifiScan_t sendNetworkWifiScan;
    ARCONTROLLER_FEATURE_JumpingSumo_SendNetworkWifiAuthChannel_t sendNetworkWifiAuthChannel;
    ARCONTROLLER_FEATURE_JumpingSumo_SendAudioSettingsMasterVolume_t sendAudioSettingsMasterVolume;
    ARCONTROLLER_FEATURE_JumpingSumo_SendAudioSettingsTheme_t sendAudioSettingsTheme;
    ARCONTROLLER_FEATURE_JumpingSumo_SendRoadPlanAllScriptsMetadata_t sendRoadPlanAllScriptsMetadata;
    ARCONTROLLER_FEATURE_JumpingSumo_SendRoadPlanScriptUploaded_t sendRoadPlanScriptUploaded;
    ARCONTROLLER_FEATURE_JumpingSumo_SendRoadPlanScriptDelete_t sendRoadPlanScriptDelete;
    ARCONTROLLER_FEATURE_JumpingSumo_SendRoadPlanPlayScript_t sendRoadPlanPlayScript;
    ARCONTROLLER_FEATURE_JumpingSumo_SendSpeedSettingsOutdoor_t sendSpeedSettingsOutdoor;
    ARCONTROLLER_FEATURE_JumpingSumo_SendMediaStreamingVideoEnable_t sendMediaStreamingVideoEnable;
    ARCONTROLLER_FEATURE_JumpingSumo_Private_t *privatePart; /**< Private part of ARCONTROLLER_FEATURE_JumpingSumo_t */
};

/**
 * @brief Set a NetworkController to use to send commands.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] networkController The networkController used to send commands ; must be not NULL.
 * @return error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_JumpingSumo_SetNetworkController (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, ARCONTROLLER_Network_t *networkController);

/**
 * @brief Get the elements of a command received.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command.
 * @param[out] error executing error.
 * @return Element dictionary of the command ; Can be null if an error is occurred.
 */
ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_JumpingSumo_GetCommandElements (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, eARCONTROLLER_ERROR *error);

/*******************************
 * --- FEATURE JumpingSumoDebug --- 
 ******************************/

/**
 * @brief Private part of ARCONTROLLER_FEATURE_JumpingSumoDebug_t.
 */
typedef struct ARCONTROLLER_FEATURE_JumpingSumoDebug_Private_t ARCONTROLLER_FEATURE_JumpingSumoDebug_Private_t;

/**
 * @brief Feature controller allow to send command related of JumpingSumoDebug Feature.
 * All debug commands specific to the Jumping Sumo.
 */
typedef struct ARCONTROLLER_FEATURE_JumpingSumoDebug_t ARCONTROLLER_FEATURE_JumpingSumoDebug_t;

/**
 * @brief Create a new JumpingSumoDebug Feature Controller
 * @warning This function allocate memory
 * @post ARCONTROLLER_FEATURE_JumpingSumoDebug_Delete() must be called to delete the Feature Controller and free the memory allocated.
 * @param[in] networkController The networkController used to send commands ; can be NULL and defind later with ARCONTROLLER_FEATURE_JumpingSumoDebug_SetNetworkController().
 * @param[out] error executing error.
 * @return the new JumpingSumoDebug Feature Controller
 * @see ARCONTROLLER_FEATURE_JumpingSumoDebug_Delete
 */
ARCONTROLLER_FEATURE_JumpingSumoDebug_t *ARCONTROLLER_FEATURE_JumpingSumoDebug_New (ARCONTROLLER_Network_t *networkController, eARCONTROLLER_ERROR *error);

/**
 * @brief Delete the JumpingSumoDebug Feature Controller
 * @warning This function free memory
 * @param feature The feature controller to delete
 * @see ARCONTROLLER_FEATURE_JumpingSumoDebug_New
 */
void ARCONTROLLER_FEATURE_JumpingSumoDebug_Delete (ARCONTROLLER_FEATURE_JumpingSumoDebug_t **feature);

/**
 * @brief Get the dictionay of the JumpingSumoDebug Feature Controller
 * @param feature The feature controller owning the dictionary to get
 * @param[out] error executing error.
 */
ARCONTROLLER_DICTIONARY_COMMANDS_t *ARCONTROLLER_FEATURE_JumpingSumoDebug_GetDictionary (ARCONTROLLER_FEATURE_JumpingSumoDebug_t *feature, eARCONTROLLER_ERROR *error);

/**
 * @brief Add a callback to use when a command in project <code>JumpingSumoDebug</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] callback the callback to add.
 * @param[in] commandKey Key of the command which the callback must be associated.
 * @param[out] error executing error.
 * @param[int] customData custom data given as parameter to the callback.
 * @see ARCONTROLLER_FEATURE_JumpingSumoDebug_RemoveCallback.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_JumpingSumoDebug_AddCallback (ARCONTROLLER_FEATURE_JumpingSumoDebug_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

/**
 * @brief Remove a callback used when a command in project <code>JumpingSumoDebug</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] callback the callback to remove.
 * @param[int] customData The custom data given to the register.
 * @param[out] error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_JumpingSumoDebug_RemoveCallback (ARCONTROLLER_FEATURE_JumpingSumoDebug_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

/**
 * class: Jump 
 * All debug commands.
 */


/**
 * @brief Send a command <code>SetJumpMotor</code> of class <code>Jump</code> in feature <code>JumpingSumoDebug</code>
 * Ask the JS speed and turn ratio.
 * @param feature feature owning the commands
 * @param speed Jump motor speed value [-100:100].
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumoDebug_SendJumpSetJumpMotor_t) (ARCONTROLLER_FEATURE_JumpingSumoDebug_t *feature, int8_t speed);

/**
 * @brief Send a command <code>SetCameraOrientation</code> of class <code>Jump</code> in feature <code>JumpingSumoDebug</code>
 * Change the camera vertical orientation.
 * @param feature feature owning the commands
 * @param speedIncrement Orientation increment speed [-100:100].
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumoDebug_SendJumpSetCameraOrientation_t) (ARCONTROLLER_FEATURE_JumpingSumoDebug_t *feature, int8_t speedIncrement);

/**
 * class: Audio 
 * All audio debug commands.
 */


/**
 * @brief Send a command <code>PlaySoundWithName</code> of class <code>Audio</code> in feature <code>JumpingSumoDebug</code>
 * Play a sound from a file.
 * @param feature feature owning the commands
 * @param filename Name of the file.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumoDebug_SendAudioPlaySoundWithName_t) (ARCONTROLLER_FEATURE_JumpingSumoDebug_t *feature, char * filename);

/**
 * class: Misc 
 * All debug commands that you don't know where ot put.
 */


/**
 * @brief Send a command <code>DebugEvent</code> of class <code>Misc</code> in feature <code>JumpingSumoDebug</code>
 * Command to create an event in colibry state machine for all kinds of debug.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumoDebug_SendMiscDebugEvent_t) (ARCONTROLLER_FEATURE_JumpingSumoDebug_t *feature);

/**
 * class: Animation 
 * Triggerable animations.
 */

#if 0
/**
 * @brief Send a command <code>PlayAnimation</code> of class <code>Animation</code> in feature <code>JumpingSumoDebug</code>
 * Play an animation.
 * @param feature feature owning the commands
 * @param id Animation ID.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumoDebug_SendAnimationPlayAnimation_t) (ARCONTROLLER_FEATURE_JumpingSumoDebug_t *feature, eARCOMMANDS_JUMPINGSUMODEBUG_ANIMATION_PLAYANIMATION_ID id);
#endif

/**
 * @brief Send a command <code>AddCapOffset</code> of class <code>Animation</code> in feature <code>JumpingSumoDebug</code>
 * Add the specified offset to the current cap.
 * @param feature feature owning the commands
 * @param offset Offset value in radians.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumoDebug_SendAnimationAddCapOffset_t) (ARCONTROLLER_FEATURE_JumpingSumoDebug_t *feature, float offset);

/**
 * class: UserScript 
 * All commands related to user scripts.
 */


/**
 * @brief Send a command <code>UserScriptUploaded</code> of class <code>UserScript</code> in feature <code>JumpingSumoDebug</code>
 * Command to notify the firmware that a new user script was uploaded.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumoDebug_SendUserScriptUserScriptUploaded_t) (ARCONTROLLER_FEATURE_JumpingSumoDebug_t *feature);

/**
 * class: UserScriptState 
 * All status information related with user scripts.
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMODEBUG_USERSCRIPTSTATE_USERSCRIPTPARSED_SUCCESS; /**< Key of the argument </code>success</code> of class <code>UserScriptState</code> in feature <code>JumpingSumoDebug</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMODEBUG_USERSCRIPTSTATE_USERSCRIPTPARSED_MESSAGE; /**< Key of the argument </code>message</code> of class <code>UserScriptState</code> in feature <code>JumpingSumoDebug</code> */

/**
 * @brief Feature controller allow to send command related of JumpingSumoDebug Feature.
 * All debug commands specific to the Jumping Sumo.
 */
struct ARCONTROLLER_FEATURE_JumpingSumoDebug_t
{
    ARCONTROLLER_FEATURE_JumpingSumoDebug_SendJumpSetJumpMotor_t sendJumpSetJumpMotor;
    ARCONTROLLER_FEATURE_JumpingSumoDebug_SendJumpSetCameraOrientation_t sendJumpSetCameraOrientation;
    ARCONTROLLER_FEATURE_JumpingSumoDebug_SendAudioPlaySoundWithName_t sendAudioPlaySoundWithName;
    ARCONTROLLER_FEATURE_JumpingSumoDebug_SendMiscDebugEvent_t sendMiscDebugEvent;
    void* sendAnimationPlayAnimation;
    ARCONTROLLER_FEATURE_JumpingSumoDebug_SendAnimationAddCapOffset_t sendAnimationAddCapOffset;
    ARCONTROLLER_FEATURE_JumpingSumoDebug_SendUserScriptUserScriptUploaded_t sendUserScriptUserScriptUploaded;
    ARCONTROLLER_FEATURE_JumpingSumoDebug_Private_t *privatePart; /**< Private part of ARCONTROLLER_FEATURE_JumpingSumoDebug_t */
};

/**
 * @brief Set a NetworkController to use to send commands.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] networkController The networkController used to send commands ; must be not NULL.
 * @return error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_JumpingSumoDebug_SetNetworkController (ARCONTROLLER_FEATURE_JumpingSumoDebug_t *feature, ARCONTROLLER_Network_t *networkController);

/**
 * @brief Get the elements of a command received.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command.
 * @param[out] error executing error.
 * @return Element dictionary of the command ; Can be null if an error is occurred.
 */
ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_JumpingSumoDebug_GetCommandElements (ARCONTROLLER_FEATURE_JumpingSumoDebug_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, eARCONTROLLER_ERROR *error);

/*******************************
 * --- FEATURE MiniDrone --- 
 ******************************/

/**
 * @brief Private part of ARCONTROLLER_FEATURE_MiniDrone_t.
 */
typedef struct ARCONTROLLER_FEATURE_MiniDrone_Private_t ARCONTROLLER_FEATURE_MiniDrone_Private_t;

/**
 * @brief Feature controller allow to send command related of MiniDrone Feature.
 * All MiniDrone-only commands
 */
typedef struct ARCONTROLLER_FEATURE_MiniDrone_t ARCONTROLLER_FEATURE_MiniDrone_t;

/**
 * @brief Create a new MiniDrone Feature Controller
 * @warning This function allocate memory
 * @post ARCONTROLLER_FEATURE_MiniDrone_Delete() must be called to delete the Feature Controller and free the memory allocated.
 * @param[in] networkController The networkController used to send commands ; can be NULL and defind later with ARCONTROLLER_FEATURE_MiniDrone_SetNetworkController().
 * @param[out] error executing error.
 * @return the new MiniDrone Feature Controller
 * @see ARCONTROLLER_FEATURE_MiniDrone_Delete
 */
ARCONTROLLER_FEATURE_MiniDrone_t *ARCONTROLLER_FEATURE_MiniDrone_New (ARCONTROLLER_Network_t *networkController, eARCONTROLLER_ERROR *error);

/**
 * @brief Delete the MiniDrone Feature Controller
 * @warning This function free memory
 * @param feature The feature controller to delete
 * @see ARCONTROLLER_FEATURE_MiniDrone_New
 */
void ARCONTROLLER_FEATURE_MiniDrone_Delete (ARCONTROLLER_FEATURE_MiniDrone_t **feature);

/**
 * @brief Get the dictionay of the MiniDrone Feature Controller
 * @param feature The feature controller owning the dictionary to get
 * @param[out] error executing error.
 */
ARCONTROLLER_DICTIONARY_COMMANDS_t *ARCONTROLLER_FEATURE_MiniDrone_GetDictionary (ARCONTROLLER_FEATURE_MiniDrone_t *feature, eARCONTROLLER_ERROR *error);

/**
 * @brief Add a callback to use when a command in project <code>MiniDrone</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] callback the callback to add.
 * @param[in] commandKey Key of the command which the callback must be associated.
 * @param[out] error executing error.
 * @param[int] customData custom data given as parameter to the callback.
 * @see ARCONTROLLER_FEATURE_MiniDrone_RemoveCallback.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_AddCallback (ARCONTROLLER_FEATURE_MiniDrone_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

/**
 * @brief Remove a callback used when a command in project <code>MiniDrone</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] callback the callback to remove.
 * @param[int] customData The custom data given to the register.
 * @param[out] error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_RemoveCallback (ARCONTROLLER_FEATURE_MiniDrone_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

/**
 * class: Piloting 
 * All commands related to piloting the MiniDrone
 */


/**
 * @brief Send a command <code>FlatTrim</code> of class <code>Piloting</code> in feature <code>MiniDrone</code>
 * Do a flat trim
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendPilotingFlatTrim_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature);

/**
 * @brief Send a command <code>TakeOff</code> of class <code>Piloting</code> in feature <code>MiniDrone</code>
 * Ask the drone to take off
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendPilotingTakeOff_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature);

/**
 * @brief Send a command <code>PCMD</code> of class <code>Piloting</code> in feature <code>MiniDrone</code>
 * Ask the drone to move around.
 * @param feature feature owning the commands
 * @param flag Boolean flag to activate roll/pitch movement
 * @param roll Roll consign for the MiniDrone [-100;100]
 * @param pitch Pitch consign for the MiniDrone [-100;100]
 * @param yaw Yaw consign for the MiniDrone [-100;100]
 * @param gaz Gaz consign for the MiniDrone [-100;100]
 * @param psi Magnetic north heading of the controlling device (deg) [-360;360]
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendPilotingPCMD_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t flag, int8_t roll, int8_t pitch, int8_t yaw, int8_t gaz, float psi);

/**
 * @brief Set the parameters to send through the command <code>PCMD</code> of class <code>Piloting</code> in project <code>MiniDrone</code>
 * Ask the drone to move around.
 * @param feature feature owning the commands
 * @param flag Boolean flag to activate roll/pitch movement
 * @param roll Roll consign for the MiniDrone [-100;100]
 * @param pitch Pitch consign for the MiniDrone [-100;100]
 * @param yaw Yaw consign for the MiniDrone [-100;100]
 * @param gaz Gaz consign for the MiniDrone [-100;100]
 * @param psi Magnetic north heading of the controlling device (deg) [-360;360]
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SetPilotingPCMD_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t flag, int8_t roll, int8_t pitch, int8_t yaw, int8_t gaz, float psi);

/**
 * @brief Send the a command <code>PCMD</code> of class <code>Piloting</code> in project <code>MiniDrone</code> with the parame set beforehand 
 * Ask the drone to move around.
 * @param feature feature owning the commands
 * @param cmdBuffer buffer to store the command
 * @param cmdBufferSize size of the buffer
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_MiniDrone_SendPilotingPCMDStruct (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t *cmdBuffer, int32_t cmdBufferSize);

/**
 * @brief Set flag sent through the command <code>PCMD</code> of class <code>Piloting</code> in project <code>MiniDrone</code>
 * Ask the drone to move around.
 * @param feature feature owning the commands
 * @param flag Boolean flag to activate roll/pitch movement
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SetPilotingPCMDFlag_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t flag);

/**
 * @brief Set roll sent through the command <code>PCMD</code> of class <code>Piloting</code> in project <code>MiniDrone</code>
 * Ask the drone to move around.
 * @param feature feature owning the commands
 * @param roll Roll consign for the MiniDrone [-100;100]
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SetPilotingPCMDRoll_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, int8_t roll);

/**
 * @brief Set pitch sent through the command <code>PCMD</code> of class <code>Piloting</code> in project <code>MiniDrone</code>
 * Ask the drone to move around.
 * @param feature feature owning the commands
 * @param pitch Pitch consign for the MiniDrone [-100;100]
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SetPilotingPCMDPitch_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, int8_t pitch);

/**
 * @brief Set yaw sent through the command <code>PCMD</code> of class <code>Piloting</code> in project <code>MiniDrone</code>
 * Ask the drone to move around.
 * @param feature feature owning the commands
 * @param yaw Yaw consign for the MiniDrone [-100;100]
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SetPilotingPCMDYaw_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, int8_t yaw);

/**
 * @brief Set gaz sent through the command <code>PCMD</code> of class <code>Piloting</code> in project <code>MiniDrone</code>
 * Ask the drone to move around.
 * @param feature feature owning the commands
 * @param gaz Gaz consign for the MiniDrone [-100;100]
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SetPilotingPCMDGaz_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, int8_t gaz);

/**
 * @brief Set psi sent through the command <code>PCMD</code> of class <code>Piloting</code> in project <code>MiniDrone</code>
 * Ask the drone to move around.
 * @param feature feature owning the commands
 * @param psi Magnetic north heading of the controlling device (deg) [-360;360]
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SetPilotingPCMDPsi_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, float psi);

/**
 * @brief Send a command <code>Landing</code> of class <code>Piloting</code> in feature <code>MiniDrone</code>
 * Ask the MiniDrone to land
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendPilotingLanding_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature);

/**
 * @brief Send a command <code>Emergency</code> of class <code>Piloting</code> in feature <code>MiniDrone</code>
 * Put drone in emergency state
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendPilotingEmergency_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature);

/**
 * @brief Send a command <code>AutoTakeOffMode</code> of class <code>Piloting</code> in feature <code>MiniDrone</code>
 * Set MiniDrone automatic take off mode
 * @param feature feature owning the commands
 * @param state State of automatic take off mode
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendPilotingAutoTakeOffMode_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t state);

/**
 * class: PilotingState 
 * Occasional information
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSTATE_FLYINGSTATECHANGED_STATE; /**< Key of the argument </code>state</code> of class <code>PilotingState</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSTATE_ALERTSTATECHANGED_STATE; /**< Key of the argument </code>state</code> of class <code>PilotingState</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSTATE_AUTOTAKEOFFMODECHANGED_STATE; /**< Key of the argument </code>state</code> of class <code>PilotingState</code> in feature <code>MiniDrone</code> */

/**
 * class: Animations 
 * Animation commands
 */


/**
 * @brief Send a command <code>Flip</code> of class <code>Animations</code> in feature <code>MiniDrone</code>
 * Make a flip
 * @param feature feature owning the commands
 * @param direction Direction for the flip
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendAnimationsFlip_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, eARCOMMANDS_MINIDRONE_ANIMATIONS_FLIP_DIRECTION direction);

/**
 * @brief Send a command <code>Cap</code> of class <code>Animations</code> in feature <code>MiniDrone</code>
 * Change the product cap
 * @param feature feature owning the commands
 * @param offset Change the cap with offset angle [-180;180]
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendAnimationsCap_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, int16_t offset);

/**
 * class: MediaRecord 
 * Media recording management
 */


/**
 * @brief Send a command <code>Picture</code> of class <code>MediaRecord</code> in feature <code>MiniDrone</code>
 * @deprecated
 * Take picture
 * @param feature feature owning the commands
 * @param mass_storage_id Mass storage id to take picture
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendMediaRecordPicture_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t mass_storage_id);

/**
 * @brief Send a command <code>PictureV2</code> of class <code>MediaRecord</code> in feature <code>MiniDrone</code>
 * Take picture
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendMediaRecordPictureV2_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature);

/**
 * class: MediaRecordState 
 * State of media recording
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGED_STATE; /**< Key of the argument </code>state</code> of class <code>MediaRecordState</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGED_MASS_STORAGE_ID; /**< Key of the argument </code>mass_storage_id</code> of class <code>MediaRecordState</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE; /**< Key of the argument </code>state</code> of class <code>MediaRecordState</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR; /**< Key of the argument </code>error</code> of class <code>MediaRecordState</code> in feature <code>MiniDrone</code> */

/**
 * class: MediaRecordEvent 
 * Events of media recording
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT; /**< Key of the argument </code>event</code> of class <code>MediaRecordEvent</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR; /**< Key of the argument </code>error</code> of class <code>MediaRecordEvent</code> in feature <code>MiniDrone</code> */

/**
 * class: PilotingSettings 
 * Piloting Settings commands
 */


/**
 * @brief Send a command <code>MaxAltitude</code> of class <code>PilotingSettings</code> in feature <code>MiniDrone</code>
 * Set Max Altitude
 * @param feature feature owning the commands
 * @param current Current altitude max in m
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendPilotingSettingsMaxAltitude_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, float current);

/**
 * @brief Send a command <code>MaxTilt</code> of class <code>PilotingSettings</code> in feature <code>MiniDrone</code>
 * Set Max Tilt
 * @param feature feature owning the commands
 * @param current Current tilt max in degree
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendPilotingSettingsMaxTilt_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, float current);

/**
 * class: PilotingSettingsState 
 * Piloting Settings state from product
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_MAXALTITUDECHANGED_CURRENT; /**< Key of the argument </code>current</code> of class <code>PilotingSettingsState</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_MAXALTITUDECHANGED_MIN; /**< Key of the argument </code>min</code> of class <code>PilotingSettingsState</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_MAXALTITUDECHANGED_MAX; /**< Key of the argument </code>max</code> of class <code>PilotingSettingsState</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_MAXTILTCHANGED_CURRENT; /**< Key of the argument </code>current</code> of class <code>PilotingSettingsState</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_MAXTILTCHANGED_MIN; /**< Key of the argument </code>min</code> of class <code>PilotingSettingsState</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_MAXTILTCHANGED_MAX; /**< Key of the argument </code>max</code> of class <code>PilotingSettingsState</code> in feature <code>MiniDrone</code> */

/**
 * class: SpeedSettings 
 * Speed Settings commands
 */


/**
 * @brief Send a command <code>MaxVerticalSpeed</code> of class <code>SpeedSettings</code> in feature <code>MiniDrone</code>
 * Set Max Vertical speed
 * @param feature feature owning the commands
 * @param current Current max vertical speed in m/s
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendSpeedSettingsMaxVerticalSpeed_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, float current);

/**
 * @brief Send a command <code>MaxRotationSpeed</code> of class <code>SpeedSettings</code> in feature <code>MiniDrone</code>
 * Set Max Rotation speed
 * @param feature feature owning the commands
 * @param current Current max rotation speed in degree/s
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendSpeedSettingsMaxRotationSpeed_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, float current);

/**
 * @brief Send a command <code>Wheels</code> of class <code>SpeedSettings</code> in feature <code>MiniDrone</code>
 * Presence of wheels
 * @param feature feature owning the commands
 * @param present 1 if present, 0 if not present
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendSpeedSettingsWheels_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t present);

/**
 * class: SpeedSettingsState 
 * Speed Settings state from product
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXVERTICALSPEEDCHANGED_CURRENT; /**< Key of the argument </code>current</code> of class <code>SpeedSettingsState</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXVERTICALSPEEDCHANGED_MIN; /**< Key of the argument </code>min</code> of class <code>SpeedSettingsState</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXVERTICALSPEEDCHANGED_MAX; /**< Key of the argument </code>max</code> of class <code>SpeedSettingsState</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXROTATIONSPEEDCHANGED_CURRENT; /**< Key of the argument </code>current</code> of class <code>SpeedSettingsState</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXROTATIONSPEEDCHANGED_MIN; /**< Key of the argument </code>min</code> of class <code>SpeedSettingsState</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXROTATIONSPEEDCHANGED_MAX; /**< Key of the argument </code>max</code> of class <code>SpeedSettingsState</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_WHEELSCHANGED_PRESENT; /**< Key of the argument </code>present</code> of class <code>SpeedSettingsState</code> in feature <code>MiniDrone</code> */

/**
 * class: Settings 
 * Settings commands
 */


/**
 * @brief Send a command <code>CutOutMode</code> of class <code>Settings</code> in feature <code>MiniDrone</code>
 * Set MiniDrone cut out mode
 * @param feature feature owning the commands
 * @param enable Enable cut out mode (1 if is activate, 0 otherwise)
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendSettingsCutOutMode_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t enable);

/**
 * class: SettingsState 
 * Settings state from product
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_PRODUCTMOTORSVERSIONCHANGED_MOTOR; /**< Key of the argument </code>motor</code> of class <code>SettingsState</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_PRODUCTMOTORSVERSIONCHANGED_TYPE; /**< Key of the argument </code>type</code> of class <code>SettingsState</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_PRODUCTMOTORSVERSIONCHANGED_SOFTWARE; /**< Key of the argument </code>software</code> of class <code>SettingsState</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_PRODUCTMOTORSVERSIONCHANGED_HARDWARE; /**< Key of the argument </code>hardware</code> of class <code>SettingsState</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_PRODUCTINERTIALVERSIONCHANGED_SOFTWARE; /**< Key of the argument </code>software</code> of class <code>SettingsState</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_PRODUCTINERTIALVERSIONCHANGED_HARDWARE; /**< Key of the argument </code>hardware</code> of class <code>SettingsState</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_CUTOUTMODECHANGED_ENABLE; /**< Key of the argument </code>enable</code> of class <code>SettingsState</code> in feature <code>MiniDrone</code> */

/**
 * class: FloodControlState 
 * Settings state from product
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_FLOODCONTROLSTATE_FLOODCONTROLCHANGED_DELAY; /**< Key of the argument </code>delay</code> of class <code>FloodControlState</code> in feature <code>MiniDrone</code> */

/**
 * class: GPS 
 * GPS related commands
 */


/**
 * @brief Send a command <code>ControllerLatitudeForRun</code> of class <code>GPS</code> in feature <code>MiniDrone</code>
 * Set the controller latitude for a run.
 * @param feature feature owning the commands
 * @param latitude Controller latitude in decimal degrees
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendGPSControllerLatitudeForRun_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, double latitude);

/**
 * @brief Send a command <code>ControllerLongitudeForRun</code> of class <code>GPS</code> in feature <code>MiniDrone</code>
 * Set the controller longitude for a run.
 * @param feature feature owning the commands
 * @param longitude Controller longitude in decimal degrees
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendGPSControllerLongitudeForRun_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, double longitude);

/**
 * @brief Feature controller allow to send command related of MiniDrone Feature.
 * All MiniDrone-only commands
 */
struct ARCONTROLLER_FEATURE_MiniDrone_t
{
    ARCONTROLLER_FEATURE_MiniDrone_SendPilotingFlatTrim_t sendPilotingFlatTrim;
    ARCONTROLLER_FEATURE_MiniDrone_SendPilotingTakeOff_t sendPilotingTakeOff;
    ARCONTROLLER_FEATURE_MiniDrone_SendPilotingPCMD_t sendPilotingPCMD;
    ARCONTROLLER_FEATURE_MiniDrone_SetPilotingPCMD_t setPilotingPCMD;
    ARCONTROLLER_FEATURE_MiniDrone_SetPilotingPCMDFlag_t setPilotingPCMDFlag; /**< Send a command <code>PCMD</code> of class <code>Piloting</code> in feature <code>MiniDrone</code>. */
    ARCONTROLLER_FEATURE_MiniDrone_SetPilotingPCMDRoll_t setPilotingPCMDRoll; /**< Send a command <code>PCMD</code> of class <code>Piloting</code> in feature <code>MiniDrone</code>. */
    ARCONTROLLER_FEATURE_MiniDrone_SetPilotingPCMDPitch_t setPilotingPCMDPitch; /**< Send a command <code>PCMD</code> of class <code>Piloting</code> in feature <code>MiniDrone</code>. */
    ARCONTROLLER_FEATURE_MiniDrone_SetPilotingPCMDYaw_t setPilotingPCMDYaw; /**< Send a command <code>PCMD</code> of class <code>Piloting</code> in feature <code>MiniDrone</code>. */
    ARCONTROLLER_FEATURE_MiniDrone_SetPilotingPCMDGaz_t setPilotingPCMDGaz; /**< Send a command <code>PCMD</code> of class <code>Piloting</code> in feature <code>MiniDrone</code>. */
    ARCONTROLLER_FEATURE_MiniDrone_SetPilotingPCMDPsi_t setPilotingPCMDPsi; /**< Send a command <code>PCMD</code> of class <code>Piloting</code> in feature <code>MiniDrone</code>. */
    ARCONTROLLER_FEATURE_MiniDrone_SendPilotingLanding_t sendPilotingLanding;
    ARCONTROLLER_FEATURE_MiniDrone_SendPilotingEmergency_t sendPilotingEmergency;
    ARCONTROLLER_FEATURE_MiniDrone_SendPilotingAutoTakeOffMode_t sendPilotingAutoTakeOffMode;
    ARCONTROLLER_FEATURE_MiniDrone_SendAnimationsFlip_t sendAnimationsFlip;
    ARCONTROLLER_FEATURE_MiniDrone_SendAnimationsCap_t sendAnimationsCap;
    ARCONTROLLER_FEATURE_MiniDrone_SendMediaRecordPicture_t sendMediaRecordPicture;
    ARCONTROLLER_FEATURE_MiniDrone_SendMediaRecordPictureV2_t sendMediaRecordPictureV2;
    ARCONTROLLER_FEATURE_MiniDrone_SendPilotingSettingsMaxAltitude_t sendPilotingSettingsMaxAltitude;
    ARCONTROLLER_FEATURE_MiniDrone_SendPilotingSettingsMaxTilt_t sendPilotingSettingsMaxTilt;
    ARCONTROLLER_FEATURE_MiniDrone_SendSpeedSettingsMaxVerticalSpeed_t sendSpeedSettingsMaxVerticalSpeed;
    ARCONTROLLER_FEATURE_MiniDrone_SendSpeedSettingsMaxRotationSpeed_t sendSpeedSettingsMaxRotationSpeed;
    ARCONTROLLER_FEATURE_MiniDrone_SendSpeedSettingsWheels_t sendSpeedSettingsWheels;
    ARCONTROLLER_FEATURE_MiniDrone_SendSettingsCutOutMode_t sendSettingsCutOutMode;
    ARCONTROLLER_FEATURE_MiniDrone_SendGPSControllerLatitudeForRun_t sendGPSControllerLatitudeForRun;
    ARCONTROLLER_FEATURE_MiniDrone_SendGPSControllerLongitudeForRun_t sendGPSControllerLongitudeForRun;
    ARCONTROLLER_FEATURE_MiniDrone_Private_t *privatePart; /**< Private part of ARCONTROLLER_FEATURE_MiniDrone_t */
};

/**
 * @brief Set a NetworkController to use to send commands.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] networkController The networkController used to send commands ; must be not NULL.
 * @return error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SetNetworkController (ARCONTROLLER_FEATURE_MiniDrone_t *feature, ARCONTROLLER_Network_t *networkController);

/**
 * @brief Get the elements of a command received.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command.
 * @param[out] error executing error.
 * @return Element dictionary of the command ; Can be null if an error is occurred.
 */
ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_GetCommandElements (ARCONTROLLER_FEATURE_MiniDrone_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, eARCONTROLLER_ERROR *error);

/*******************************
 * --- FEATURE MiniDroneDebug --- 
 ******************************/

/**
 * @brief Private part of ARCONTROLLER_FEATURE_MiniDroneDebug_t.
 */
typedef struct ARCONTROLLER_FEATURE_MiniDroneDebug_Private_t ARCONTROLLER_FEATURE_MiniDroneDebug_Private_t;

/**
 * @brief Feature controller allow to send command related of MiniDroneDebug Feature.
 * All MiniDrone-only debug commands
 */
typedef struct ARCONTROLLER_FEATURE_MiniDroneDebug_t ARCONTROLLER_FEATURE_MiniDroneDebug_t;

/**
 * @brief Create a new MiniDroneDebug Feature Controller
 * @warning This function allocate memory
 * @post ARCONTROLLER_FEATURE_MiniDroneDebug_Delete() must be called to delete the Feature Controller and free the memory allocated.
 * @param[in] networkController The networkController used to send commands ; can be NULL and defind later with ARCONTROLLER_FEATURE_MiniDroneDebug_SetNetworkController().
 * @param[out] error executing error.
 * @return the new MiniDroneDebug Feature Controller
 * @see ARCONTROLLER_FEATURE_MiniDroneDebug_Delete
 */
ARCONTROLLER_FEATURE_MiniDroneDebug_t *ARCONTROLLER_FEATURE_MiniDroneDebug_New (ARCONTROLLER_Network_t *networkController, eARCONTROLLER_ERROR *error);

/**
 * @brief Delete the MiniDroneDebug Feature Controller
 * @warning This function free memory
 * @param feature The feature controller to delete
 * @see ARCONTROLLER_FEATURE_MiniDroneDebug_New
 */
void ARCONTROLLER_FEATURE_MiniDroneDebug_Delete (ARCONTROLLER_FEATURE_MiniDroneDebug_t **feature);

/**
 * @brief Get the dictionay of the MiniDroneDebug Feature Controller
 * @param feature The feature controller owning the dictionary to get
 * @param[out] error executing error.
 */
ARCONTROLLER_DICTIONARY_COMMANDS_t *ARCONTROLLER_FEATURE_MiniDroneDebug_GetDictionary (ARCONTROLLER_FEATURE_MiniDroneDebug_t *feature, eARCONTROLLER_ERROR *error);

/**
 * @brief Add a callback to use when a command in project <code>MiniDroneDebug</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] callback the callback to add.
 * @param[in] commandKey Key of the command which the callback must be associated.
 * @param[out] error executing error.
 * @param[int] customData custom data given as parameter to the callback.
 * @see ARCONTROLLER_FEATURE_MiniDroneDebug_RemoveCallback.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDroneDebug_AddCallback (ARCONTROLLER_FEATURE_MiniDroneDebug_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

/**
 * @brief Remove a callback used when a command in project <code>MiniDroneDebug</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] callback the callback to remove.
 * @param[int] customData The custom data given to the register.
 * @param[out] error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDroneDebug_RemoveCallback (ARCONTROLLER_FEATURE_MiniDroneDebug_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

/**
 * class: Debug 
 * Temporary, debug commands
 */


/**
 * @brief Send a command <code>Test1</code> of class <code>Debug</code> in feature <code>MiniDroneDebug</code>
 * Test 1 command
 * @param feature feature owning the commands
 * @param t1Args Test 1 argument
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDroneDebug_SendDebugTest1_t) (ARCONTROLLER_FEATURE_MiniDroneDebug_t *feature, int8_t t1Args);

/**
 * @brief Send a command <code>Test2</code> of class <code>Debug</code> in feature <code>MiniDroneDebug</code>
 * Test 2 command
 * @param feature feature owning the commands
 * @param t2Args Test 2 argument
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDroneDebug_SendDebugTest2_t) (ARCONTROLLER_FEATURE_MiniDroneDebug_t *feature, int8_t t2Args);

/**
 * @brief Send a command <code>Test3</code> of class <code>Debug</code> in feature <code>MiniDroneDebug</code>
 * Test 3 command
 * @param feature feature owning the commands
 * @param t3Args Test 3 argument
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDroneDebug_SendDebugTest3_t) (ARCONTROLLER_FEATURE_MiniDroneDebug_t *feature, int8_t t3Args);

/**
 * @brief Feature controller allow to send command related of MiniDroneDebug Feature.
 * All MiniDrone-only debug commands
 */
struct ARCONTROLLER_FEATURE_MiniDroneDebug_t
{
    ARCONTROLLER_FEATURE_MiniDroneDebug_SendDebugTest1_t sendDebugTest1;
    ARCONTROLLER_FEATURE_MiniDroneDebug_SendDebugTest2_t sendDebugTest2;
    ARCONTROLLER_FEATURE_MiniDroneDebug_SendDebugTest3_t sendDebugTest3;
    ARCONTROLLER_FEATURE_MiniDroneDebug_Private_t *privatePart; /**< Private part of ARCONTROLLER_FEATURE_MiniDroneDebug_t */
};

/**
 * @brief Set a NetworkController to use to send commands.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] networkController The networkController used to send commands ; must be not NULL.
 * @return error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDroneDebug_SetNetworkController (ARCONTROLLER_FEATURE_MiniDroneDebug_t *feature, ARCONTROLLER_Network_t *networkController);

/**
 * @brief Get the elements of a command received.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command.
 * @param[out] error executing error.
 * @return Element dictionary of the command ; Can be null if an error is occurred.
 */
ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDroneDebug_GetCommandElements (ARCONTROLLER_FEATURE_MiniDroneDebug_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, eARCONTROLLER_ERROR *error);

/*******************************
 * --- FEATURE SkyController --- 
 ******************************/

/**
 * @brief Private part of ARCONTROLLER_FEATURE_SkyController_t.
 */
typedef struct ARCONTROLLER_FEATURE_SkyController_Private_t ARCONTROLLER_FEATURE_SkyController_Private_t;

/**
 * @brief Feature controller allow to send command related of SkyController Feature.
 * All SkyController-only commands
 */
typedef struct ARCONTROLLER_FEATURE_SkyController_t ARCONTROLLER_FEATURE_SkyController_t;

/**
 * @brief Create a new SkyController Feature Controller
 * @warning This function allocate memory
 * @post ARCONTROLLER_FEATURE_SkyController_Delete() must be called to delete the Feature Controller and free the memory allocated.
 * @param[in] networkController The networkController used to send commands ; can be NULL and defind later with ARCONTROLLER_FEATURE_SkyController_SetNetworkController().
 * @param[out] error executing error.
 * @return the new SkyController Feature Controller
 * @see ARCONTROLLER_FEATURE_SkyController_Delete
 */
ARCONTROLLER_FEATURE_SkyController_t *ARCONTROLLER_FEATURE_SkyController_New (ARCONTROLLER_Network_t *networkController, eARCONTROLLER_ERROR *error);

/**
 * @brief Delete the SkyController Feature Controller
 * @warning This function free memory
 * @param feature The feature controller to delete
 * @see ARCONTROLLER_FEATURE_SkyController_New
 */
void ARCONTROLLER_FEATURE_SkyController_Delete (ARCONTROLLER_FEATURE_SkyController_t **feature);

/**
 * @brief Get the dictionay of the SkyController Feature Controller
 * @param feature The feature controller owning the dictionary to get
 * @param[out] error executing error.
 */
ARCONTROLLER_DICTIONARY_COMMANDS_t *ARCONTROLLER_FEATURE_SkyController_GetDictionary (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCONTROLLER_ERROR *error);

/**
 * @brief Add a callback to use when a command in project <code>SkyController</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] callback the callback to add.
 * @param[in] commandKey Key of the command which the callback must be associated.
 * @param[out] error executing error.
 * @param[int] customData custom data given as parameter to the callback.
 * @see ARCONTROLLER_FEATURE_SkyController_RemoveCallback.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_AddCallback (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

/**
 * @brief Remove a callback used when a command in project <code>SkyController</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] callback the callback to remove.
 * @param[int] customData The custom data given to the register.
 * @param[out] error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_RemoveCallback (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

/**
 * class: WifiState 
 * Wifi state
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_WIFISTATE_WIFILIST_BSSID; /**< Key of the argument </code>bssid</code> of class <code>WifiState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_WIFISTATE_WIFILIST_SSID; /**< Key of the argument </code>ssid</code> of class <code>WifiState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_WIFISTATE_WIFILIST_SECURED; /**< Key of the argument </code>secured</code> of class <code>WifiState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_WIFISTATE_WIFILIST_SAVED; /**< Key of the argument </code>saved</code> of class <code>WifiState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_WIFISTATE_WIFILIST_RSSI; /**< Key of the argument </code>rssi</code> of class <code>WifiState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_WIFISTATE_WIFILIST_FREQUENCY; /**< Key of the argument </code>frequency</code> of class <code>WifiState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_WIFISTATE_CONNEXIONCHANGED_SSID; /**< Key of the argument </code>ssid</code> of class <code>WifiState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_WIFISTATE_CONNEXIONCHANGED_STATUS; /**< Key of the argument </code>status</code> of class <code>WifiState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_WIFISTATE_WIFIAUTHCHANNELLISTCHANGED_BAND; /**< Key of the argument </code>band</code> of class <code>WifiState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_WIFISTATE_WIFIAUTHCHANNELLISTCHANGED_CHANNEL; /**< Key of the argument </code>channel</code> of class <code>WifiState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_WIFISTATE_WIFIAUTHCHANNELLISTCHANGED_IN_OR_OUT; /**< Key of the argument </code>in_or_out</code> of class <code>WifiState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_WIFISTATE_WIFISIGNALCHANGED_LEVEL; /**< Key of the argument </code>level</code> of class <code>WifiState</code> in feature <code>SkyController</code> */

/**
 * class: Wifi 
 * Wifi
 */


/**
 * @brief Send a command <code>RequestWifiList</code> of class <code>Wifi</code> in feature <code>SkyController</code>
 * Request wifi list
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendWifiRequestWifiList_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>RequestCurrentWifi</code> of class <code>Wifi</code> in feature <code>SkyController</code>
 * Request current connected wifi
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendWifiRequestCurrentWifi_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>ConnectToWifi</code> of class <code>Wifi</code> in feature <code>SkyController</code>
 * Connect to wifi
 * @param feature feature owning the commands
 * @param bssid Wifi bssid
 * @param ssid Wifi ssid
 * @param passphrase Wifi passphrase
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendWifiConnectToWifi_t) (ARCONTROLLER_FEATURE_SkyController_t *feature, char * bssid, char * ssid, char * passphrase);

/**
 * @brief Send a command <code>ForgetWifi</code> of class <code>Wifi</code> in feature <code>SkyController</code>
 * Forget wifi
 * @param feature feature owning the commands
 * @param ssid Wifi ssid
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendWifiForgetWifi_t) (ARCONTROLLER_FEATURE_SkyController_t *feature, char * ssid);

/**
 * @brief Send a command <code>WifiAuthChannel</code> of class <code>Wifi</code> in feature <code>SkyController</code>
 * Controller inquire the list of authorized wifi channels
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendWifiWifiAuthChannel_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * class: Device 
 * Device Connection commands
 */


/**
 * @brief Send a command <code>RequestDeviceList</code> of class <code>Device</code> in feature <code>SkyController</code>
 * Request Device list
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendDeviceRequestDeviceList_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>RequestCurrentDevice</code> of class <code>Device</code> in feature <code>SkyController</code>
 * Request current connected Device
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendDeviceRequestCurrentDevice_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>ConnectToDevice</code> of class <code>Device</code> in feature <code>SkyController</code>
 * ask to connect to a device
 * @param feature feature owning the commands
 * @param deviceName Device name
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendDeviceConnectToDevice_t) (ARCONTROLLER_FEATURE_SkyController_t *feature, char * deviceName);

/**
 * class: DeviceState 
 * Device state
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_DEVICESTATE_DEVICELIST_NAME; /**< Key of the argument </code>name</code> of class <code>DeviceState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_DEVICESTATE_CONNEXIONCHANGED_STATUS; /**< Key of the argument </code>status</code> of class <code>DeviceState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_DEVICESTATE_CONNEXIONCHANGED_DEVICENAME; /**< Key of the argument </code>deviceName</code> of class <code>DeviceState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_DEVICESTATE_CONNEXIONCHANGED_DEVICEPRODUCTID; /**< Key of the argument </code>deviceProductID</code> of class <code>DeviceState</code> in feature <code>SkyController</code> */

/**
 * class: Settings 
 * Settings commands
 */


/**
 * @brief Send a command <code>AllSettings</code> of class <code>Settings</code> in feature <code>SkyController</code>
 * Get all product settings, the product must send all settings
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendSettingsAllSettings_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>Reset</code> of class <code>Settings</code> in feature <code>SkyController</code>
 * Reset all settings
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendSettingsReset_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * class: SettingsState 
 * Settings state from product
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_SETTINGSSTATE_PRODUCTSERIALCHANGED_SERIALNUMBER; /**< Key of the argument </code>serialNumber</code> of class <code>SettingsState</code> in feature <code>SkyController</code> */

/**
 * class: Common 
 * Common commands
 */


/**
 * @brief Send a command <code>AllStates</code> of class <code>Common</code> in feature <code>SkyController</code>
 * Get all product states
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendCommonAllStates_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * class: CommonState 
 * Common state from product
 */


/**
 * class: SkyControllerState 
 * Sky Controller states
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_SKYCONTROLLERSTATE_BATTERYCHANGED_PERCENT; /**< Key of the argument </code>percent</code> of class <code>SkyControllerState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_SKYCONTROLLERSTATE_GPSFIXCHANGED_FIXED; /**< Key of the argument </code>fixed</code> of class <code>SkyControllerState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_SKYCONTROLLERSTATE_GPSPOSITIONCHANGED_LATITUDE; /**< Key of the argument </code>latitude</code> of class <code>SkyControllerState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_SKYCONTROLLERSTATE_GPSPOSITIONCHANGED_LONGITUDE; /**< Key of the argument </code>longitude</code> of class <code>SkyControllerState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_SKYCONTROLLERSTATE_GPSPOSITIONCHANGED_ALTITUDE; /**< Key of the argument </code>altitude</code> of class <code>SkyControllerState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_SKYCONTROLLERSTATE_GPSPOSITIONCHANGED_HEADING; /**< Key of the argument </code>heading</code> of class <code>SkyControllerState</code> in feature <code>SkyController</code> */

/**
 * class: AccessPointSettings 
 * AccessPoint settings commands
 */


/**
 * @brief Send a command <code>AccessPointSSID</code> of class <code>AccessPointSettings</code> in feature <code>SkyController</code>
 * Set AccessPoint SSID
 * @param feature feature owning the commands
 * @param ssid AccessPoint SSID
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendAccessPointSettingsAccessPointSSID_t) (ARCONTROLLER_FEATURE_SkyController_t *feature, char * ssid);

/**
 * @brief Send a command <code>AccessPointChannel</code> of class <code>AccessPointSettings</code> in feature <code>SkyController</code>
 * Set AccessPoint Channel
 * @param feature feature owning the commands
 * @param channel AccessPoint Channel
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendAccessPointSettingsAccessPointChannel_t) (ARCONTROLLER_FEATURE_SkyController_t *feature, uint8_t channel);

/**
 * @brief Send a command <code>WifiSelection</code> of class <code>AccessPointSettings</code> in feature <code>SkyController</code>
 * Set AccessPoint Band and Channel
 * @param feature feature owning the commands
 * @param type The type of wifi selection (only manual at the moment)
 * @param band The allowed band : 2.4 Ghz or 5 Ghz
 * @param channel The channel
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendAccessPointSettingsWifiSelection_t) (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGS_WIFISELECTION_TYPE type, eARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGS_WIFISELECTION_BAND band, uint8_t channel);

/**
 * class: AccessPointSettingsState 
 * AccessPoint settings state from product
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_ACCESSPOINTSSIDCHANGED_SSID; /**< Key of the argument </code>ssid</code> of class <code>AccessPointSettingsState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_ACCESSPOINTCHANNELCHANGED_CHANNEL; /**< Key of the argument </code>channel</code> of class <code>AccessPointSettingsState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE; /**< Key of the argument </code>type</code> of class <code>AccessPointSettingsState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISELECTIONCHANGED_BAND; /**< Key of the argument </code>band</code> of class <code>AccessPointSettingsState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISELECTIONCHANGED_CHANNEL; /**< Key of the argument </code>channel</code> of class <code>AccessPointSettingsState</code> in feature <code>SkyController</code> */

/**
 * class: Camera 
 * Ask the drone to move camera
 */


/**
 * @brief Send a command <code>ResetOrientation</code> of class <code>Camera</code> in feature <code>SkyController</code>
 * Reset pan and tilt to center
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendCameraResetOrientation_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * class: GamepadInfos 
 * Request infos about the gamepad of the SkyController
 */


/**
 * @brief Send a command <code>GetGamepadControls</code> of class <code>GamepadInfos</code> in feature <code>SkyController</code>
 * Asks the SkyController to send the button and axis list
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendGamepadInfosGetGamepadControls_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * class: GamepadInfosState 
 * Informations about the gamepad of the SkyController
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_GAMEPADINFOSSTATE_GAMEPADCONTROL_TYPE; /**< Key of the argument </code>type</code> of class <code>GamepadInfosState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_GAMEPADINFOSSTATE_GAMEPADCONTROL_ID; /**< Key of the argument </code>id</code> of class <code>GamepadInfosState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_GAMEPADINFOSSTATE_GAMEPADCONTROL_NAME; /**< Key of the argument </code>name</code> of class <code>GamepadInfosState</code> in feature <code>SkyController</code> */

/**
 * class: ButtonMappings 
 * Controls the button mappings of the SkyController
 */


/**
 * @brief Send a command <code>GetCurrentButtonMappings</code> of class <code>ButtonMappings</code> in feature <code>SkyController</code>
 * Asks the SkyController to send its current button mapping
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendButtonMappingsGetCurrentButtonMappings_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>GetAvailableButtonMappings</code> of class <code>ButtonMappings</code> in feature <code>SkyController</code>
 * Asks the SkyController to send the possible mappings for each button
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendButtonMappingsGetAvailableButtonMappings_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>SetButtonMapping</code> of class <code>ButtonMappings</code> in feature <code>SkyController</code>
 * Set a button mapping to the SkyController
 * @note replaces previous mapping for the given key
 * @param feature feature owning the commands
 * @param key_id The keycode to map
 * @param mapping_uid The mapping to associate with the key
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendButtonMappingsSetButtonMapping_t) (ARCONTROLLER_FEATURE_SkyController_t *feature, int32_t key_id, char * mapping_uid);

/**
 * @brief Send a command <code>DefaultButtonMapping</code> of class <code>ButtonMappings</code> in feature <code>SkyController</code>
 * Asks the SkyController to reset the button mappings to the default value
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendButtonMappingsDefaultButtonMapping_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * class: ButtonMappingsState 
 * State of the button mappings of the SkyController
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_BUTTONMAPPINGSSTATE_CURRENTBUTTONMAPPINGS_KEY_ID; /**< Key of the argument </code>key_id</code> of class <code>ButtonMappingsState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_BUTTONMAPPINGSSTATE_CURRENTBUTTONMAPPINGS_MAPPING_UID; /**< Key of the argument </code>mapping_uid</code> of class <code>ButtonMappingsState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_BUTTONMAPPINGSSTATE_AVAILABLEBUTTONMAPPINGS_MAPPING_UID; /**< Key of the argument </code>mapping_uid</code> of class <code>ButtonMappingsState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_BUTTONMAPPINGSSTATE_AVAILABLEBUTTONMAPPINGS_NAME; /**< Key of the argument </code>name</code> of class <code>ButtonMappingsState</code> in feature <code>SkyController</code> */

/**
 * class: AxisMappings 
 * Controls the axis mappings of the SkyController
 */


/**
 * @brief Send a command <code>GetCurrentAxisMappings</code> of class <code>AxisMappings</code> in feature <code>SkyController</code>
 * Asks the SkyController to send its current axis mapping
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendAxisMappingsGetCurrentAxisMappings_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>GetAvailableAxisMappings</code> of class <code>AxisMappings</code> in feature <code>SkyController</code>
 * Asks the SkyController to send the possible mappings for each axis
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendAxisMappingsGetAvailableAxisMappings_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>SetAxisMapping</code> of class <code>AxisMappings</code> in feature <code>SkyController</code>
 * Set a axis mapping to the SkyController
 * @note replaces previous mapping for the given axis
 * @param feature feature owning the commands
 * @param axis_id The axiscode to map
 * @param mapping_uid The mapping to associate with the axis
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendAxisMappingsSetAxisMapping_t) (ARCONTROLLER_FEATURE_SkyController_t *feature, int32_t axis_id, char * mapping_uid);

/**
 * @brief Send a command <code>DefaultAxisMapping</code> of class <code>AxisMappings</code> in feature <code>SkyController</code>
 * Asks the SkyController to reset the axis mappings to the default value
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendAxisMappingsDefaultAxisMapping_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * class: AxisMappingsState 
 * State of the axis mappings of the SkyController
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_AXISMAPPINGSSTATE_CURRENTAXISMAPPINGS_AXIS_ID; /**< Key of the argument </code>axis_id</code> of class <code>AxisMappingsState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_AXISMAPPINGSSTATE_CURRENTAXISMAPPINGS_MAPPING_UID; /**< Key of the argument </code>mapping_uid</code> of class <code>AxisMappingsState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_AXISMAPPINGSSTATE_AVAILABLEAXISMAPPINGS_MAPPING_UID; /**< Key of the argument </code>mapping_uid</code> of class <code>AxisMappingsState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_AXISMAPPINGSSTATE_AVAILABLEAXISMAPPINGS_NAME; /**< Key of the argument </code>name</code> of class <code>AxisMappingsState</code> in feature <code>SkyController</code> */

/**
 * class: AxisFilters 
 * Controls the axis filters of the SkyController
 */


/**
 * @brief Send a command <code>GetCurrentAxisFilters</code> of class <code>AxisFilters</code> in feature <code>SkyController</code>
 * Asks the SkyController to send its current axis filters
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendAxisFiltersGetCurrentAxisFilters_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>GetPresetAxisFilters</code> of class <code>AxisFilters</code> in feature <code>SkyController</code>
 * Asks the SkyController to send the preset filters
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendAxisFiltersGetPresetAxisFilters_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>SetAxisFilter</code> of class <code>AxisFilters</code> in feature <code>SkyController</code>
 * Set an axis filter to the SkyController
 * @note replaces previous filter for the given axis
 * @param feature feature owning the commands
 * @param axis_id The axiscode to filter
 * @param filter_uid_or_builder The mapping preset to associate with the axis
 * @param filter_uid_or_builder (Or a string to build a new one)
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendAxisFiltersSetAxisFilter_t) (ARCONTROLLER_FEATURE_SkyController_t *feature, int32_t axis_id, char * filter_uid_or_builder);

/**
 * @brief Send a command <code>DefaultAxisFilters</code> of class <code>AxisFilters</code> in feature <code>SkyController</code>
 * Asks the SkyController to reset the axis filters to the default value
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendAxisFiltersDefaultAxisFilters_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * class: AxisFiltersState 
 * State of the axis filters of the SkyController
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_AXISFILTERSSTATE_CURRENTAXISFILTERS_AXIS_ID; /**< Key of the argument </code>axis_id</code> of class <code>AxisFiltersState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_AXISFILTERSSTATE_CURRENTAXISFILTERS_FILTER_UID_OR_BUILDER; /**< Key of the argument </code>filter_uid_or_builder</code> of class <code>AxisFiltersState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_AXISFILTERSSTATE_PRESETAXISFILTERS_FILTER_UID; /**< Key of the argument </code>filter_uid</code> of class <code>AxisFiltersState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_AXISFILTERSSTATE_PRESETAXISFILTERS_NAME; /**< Key of the argument </code>name</code> of class <code>AxisFiltersState</code> in feature <code>SkyController</code> */

/**
 * class: CoPiloting 
 * Configuration of the co-piloting feature
 */


/**
 * @brief Send a command <code>SetPilotingSource</code> of class <code>CoPiloting</code> in feature <code>SkyController</code>
 * Set the SkyController piloting source
 * @param feature feature owning the commands
 * @param source The source
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendCoPilotingSetPilotingSource_t) (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCOMMANDS_SKYCONTROLLER_COPILOTING_SETPILOTINGSOURCE_SOURCE source);

/**
 * class: CoPilotingState 
 * State of the co-piloting feature
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_COPILOTINGSTATE_PILOTINGSOURCE_SOURCE; /**< Key of the argument </code>source</code> of class <code>CoPilotingState</code> in feature <code>SkyController</code> */

/**
 * class: Calibration 
 * Commands related to the SkyController sensors calibration
 */


/**
 * @brief Send a command <code>EnableMagnetoCalibrationQualityUpdates</code> of class <code>Calibration</code> in feature <code>SkyController</code>
 * Asks the SkyController to send (or not) the magneto calibration quality updates.
 * The MagnetoCalibrationState will always be sent when the status parameters changes,
 * regardless of this setting.
 * @param feature feature owning the commands
 * @param enable Flag to enable the feature.
 * @param enable 1 = enable quality updates
 * @param enable 0 = disable quality updates
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendCalibrationEnableMagnetoCalibrationQualityUpdates_t) (ARCONTROLLER_FEATURE_SkyController_t *feature, uint8_t enable);

/**
 * class: CalibrationState 
 * State of the SkyController calibration
 */

extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATE_STATUS; /**< Key of the argument </code>status</code> of class <code>CalibrationState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATE_X_QUALITY; /**< Key of the argument </code>X_Quality</code> of class <code>CalibrationState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATE_Y_QUALITY; /**< Key of the argument </code>Y_Quality</code> of class <code>CalibrationState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATE_Z_QUALITY; /**< Key of the argument </code>Z_Quality</code> of class <code>CalibrationState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONQUALITYUPDATESSTATE_ENABLED; /**< Key of the argument </code>enabled</code> of class <code>CalibrationState</code> in feature <code>SkyController</code> */

/**
 * @brief Feature controller allow to send command related of SkyController Feature.
 * All SkyController-only commands
 */
struct ARCONTROLLER_FEATURE_SkyController_t
{
    ARCONTROLLER_FEATURE_SkyController_SendWifiRequestWifiList_t sendWifiRequestWifiList;
    ARCONTROLLER_FEATURE_SkyController_SendWifiRequestCurrentWifi_t sendWifiRequestCurrentWifi;
    ARCONTROLLER_FEATURE_SkyController_SendWifiConnectToWifi_t sendWifiConnectToWifi;
    ARCONTROLLER_FEATURE_SkyController_SendWifiForgetWifi_t sendWifiForgetWifi;
    ARCONTROLLER_FEATURE_SkyController_SendWifiWifiAuthChannel_t sendWifiWifiAuthChannel;
    ARCONTROLLER_FEATURE_SkyController_SendDeviceRequestDeviceList_t sendDeviceRequestDeviceList;
    ARCONTROLLER_FEATURE_SkyController_SendDeviceRequestCurrentDevice_t sendDeviceRequestCurrentDevice;
    ARCONTROLLER_FEATURE_SkyController_SendDeviceConnectToDevice_t sendDeviceConnectToDevice;
    ARCONTROLLER_FEATURE_SkyController_SendSettingsAllSettings_t sendSettingsAllSettings;
    ARCONTROLLER_FEATURE_SkyController_SendSettingsReset_t sendSettingsReset;
    ARCONTROLLER_FEATURE_SkyController_SendCommonAllStates_t sendCommonAllStates;
    ARCONTROLLER_FEATURE_SkyController_SendAccessPointSettingsAccessPointSSID_t sendAccessPointSettingsAccessPointSSID;
    ARCONTROLLER_FEATURE_SkyController_SendAccessPointSettingsAccessPointChannel_t sendAccessPointSettingsAccessPointChannel;
    ARCONTROLLER_FEATURE_SkyController_SendAccessPointSettingsWifiSelection_t sendAccessPointSettingsWifiSelection;
    ARCONTROLLER_FEATURE_SkyController_SendCameraResetOrientation_t sendCameraResetOrientation;
    ARCONTROLLER_FEATURE_SkyController_SendGamepadInfosGetGamepadControls_t sendGamepadInfosGetGamepadControls;
    ARCONTROLLER_FEATURE_SkyController_SendButtonMappingsGetCurrentButtonMappings_t sendButtonMappingsGetCurrentButtonMappings;
    ARCONTROLLER_FEATURE_SkyController_SendButtonMappingsGetAvailableButtonMappings_t sendButtonMappingsGetAvailableButtonMappings;
    ARCONTROLLER_FEATURE_SkyController_SendButtonMappingsSetButtonMapping_t sendButtonMappingsSetButtonMapping;
    ARCONTROLLER_FEATURE_SkyController_SendButtonMappingsDefaultButtonMapping_t sendButtonMappingsDefaultButtonMapping;
    ARCONTROLLER_FEATURE_SkyController_SendAxisMappingsGetCurrentAxisMappings_t sendAxisMappingsGetCurrentAxisMappings;
    ARCONTROLLER_FEATURE_SkyController_SendAxisMappingsGetAvailableAxisMappings_t sendAxisMappingsGetAvailableAxisMappings;
    ARCONTROLLER_FEATURE_SkyController_SendAxisMappingsSetAxisMapping_t sendAxisMappingsSetAxisMapping;
    ARCONTROLLER_FEATURE_SkyController_SendAxisMappingsDefaultAxisMapping_t sendAxisMappingsDefaultAxisMapping;
    ARCONTROLLER_FEATURE_SkyController_SendAxisFiltersGetCurrentAxisFilters_t sendAxisFiltersGetCurrentAxisFilters;
    ARCONTROLLER_FEATURE_SkyController_SendAxisFiltersGetPresetAxisFilters_t sendAxisFiltersGetPresetAxisFilters;
    ARCONTROLLER_FEATURE_SkyController_SendAxisFiltersSetAxisFilter_t sendAxisFiltersSetAxisFilter;
    ARCONTROLLER_FEATURE_SkyController_SendAxisFiltersDefaultAxisFilters_t sendAxisFiltersDefaultAxisFilters;
    ARCONTROLLER_FEATURE_SkyController_SendCoPilotingSetPilotingSource_t sendCoPilotingSetPilotingSource;
    ARCONTROLLER_FEATURE_SkyController_SendCalibrationEnableMagnetoCalibrationQualityUpdates_t sendCalibrationEnableMagnetoCalibrationQualityUpdates;
    ARCONTROLLER_FEATURE_SkyController_Private_t *privatePart; /**< Private part of ARCONTROLLER_FEATURE_SkyController_t */
};

/**
 * @brief Set a NetworkController to use to send commands.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] networkController The networkController used to send commands ; must be not NULL.
 * @return error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_SetNetworkController (ARCONTROLLER_FEATURE_SkyController_t *feature, ARCONTROLLER_Network_t *networkController);

/**
 * @brief Get the elements of a command received.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command.
 * @param[out] error executing error.
 * @return Element dictionary of the command ; Can be null if an error is occurred.
 */
ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_GetCommandElements (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, eARCONTROLLER_ERROR *error);

/*******************************
 * --- FEATURE SkyControllerDebug --- 
 ******************************/

/**
 * @brief Private part of ARCONTROLLER_FEATURE_SkyControllerDebug_t.
 */
typedef struct ARCONTROLLER_FEATURE_SkyControllerDebug_Private_t ARCONTROLLER_FEATURE_SkyControllerDebug_Private_t;

/**
 * @brief Feature controller allow to send command related of SkyControllerDebug Feature.
 * All debug SkyController-only commands
 */
typedef struct ARCONTROLLER_FEATURE_SkyControllerDebug_t ARCONTROLLER_FEATURE_SkyControllerDebug_t;

/**
 * @brief Create a new SkyControllerDebug Feature Controller
 * @warning This function allocate memory
 * @post ARCONTROLLER_FEATURE_SkyControllerDebug_Delete() must be called to delete the Feature Controller and free the memory allocated.
 * @param[in] networkController The networkController used to send commands ; can be NULL and defind later with ARCONTROLLER_FEATURE_SkyControllerDebug_SetNetworkController().
 * @param[out] error executing error.
 * @return the new SkyControllerDebug Feature Controller
 * @see ARCONTROLLER_FEATURE_SkyControllerDebug_Delete
 */
ARCONTROLLER_FEATURE_SkyControllerDebug_t *ARCONTROLLER_FEATURE_SkyControllerDebug_New (ARCONTROLLER_Network_t *networkController, eARCONTROLLER_ERROR *error);

/**
 * @brief Delete the SkyControllerDebug Feature Controller
 * @warning This function free memory
 * @param feature The feature controller to delete
 * @see ARCONTROLLER_FEATURE_SkyControllerDebug_New
 */
void ARCONTROLLER_FEATURE_SkyControllerDebug_Delete (ARCONTROLLER_FEATURE_SkyControllerDebug_t **feature);

/**
 * @brief Get the dictionay of the SkyControllerDebug Feature Controller
 * @param feature The feature controller owning the dictionary to get
 * @param[out] error executing error.
 */
ARCONTROLLER_DICTIONARY_COMMANDS_t *ARCONTROLLER_FEATURE_SkyControllerDebug_GetDictionary (ARCONTROLLER_FEATURE_SkyControllerDebug_t *feature, eARCONTROLLER_ERROR *error);

/**
 * @brief Add a callback to use when a command in project <code>SkyControllerDebug</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] callback the callback to add.
 * @param[in] commandKey Key of the command which the callback must be associated.
 * @param[out] error executing error.
 * @param[int] customData custom data given as parameter to the callback.
 * @see ARCONTROLLER_FEATURE_SkyControllerDebug_RemoveCallback.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyControllerDebug_AddCallback (ARCONTROLLER_FEATURE_SkyControllerDebug_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

/**
 * @brief Remove a callback used when a command in project <code>SkyControllerDebug</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] callback the callback to remove.
 * @param[int] customData The custom data given to the register.
 * @param[out] error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyControllerDebug_RemoveCallback (ARCONTROLLER_FEATURE_SkyControllerDebug_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

/**
 * class: Debug 
 * Temporary, debug commands
 */


/**
 * @brief Send a command <code>Test1</code> of class <code>Debug</code> in feature <code>SkyControllerDebug</code>
 * Test 1 command
 * @param feature feature owning the commands
 * @param t1Args Test 1 argument
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyControllerDebug_SendDebugTest1_t) (ARCONTROLLER_FEATURE_SkyControllerDebug_t *feature, int8_t t1Args);

/**
 * @brief Feature controller allow to send command related of SkyControllerDebug Feature.
 * All debug SkyController-only commands
 */
struct ARCONTROLLER_FEATURE_SkyControllerDebug_t
{
    ARCONTROLLER_FEATURE_SkyControllerDebug_SendDebugTest1_t sendDebugTest1;
    ARCONTROLLER_FEATURE_SkyControllerDebug_Private_t *privatePart; /**< Private part of ARCONTROLLER_FEATURE_SkyControllerDebug_t */
};

/**
 * @brief Set a NetworkController to use to send commands.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] networkController The networkController used to send commands ; must be not NULL.
 * @return error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyControllerDebug_SetNetworkController (ARCONTROLLER_FEATURE_SkyControllerDebug_t *feature, ARCONTROLLER_Network_t *networkController);

/**
 * @brief Get the elements of a command received.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command.
 * @param[out] error executing error.
 * @return Element dictionary of the command ; Can be null if an error is occurred.
 */
ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyControllerDebug_GetCommandElements (ARCONTROLLER_FEATURE_SkyControllerDebug_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, eARCONTROLLER_ERROR *error);

#endif /* _ARCONTROLLER_FEATURE_H_ */

// END GENERATED CODE
