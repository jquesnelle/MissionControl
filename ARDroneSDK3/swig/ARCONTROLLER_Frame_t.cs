//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ARCONTROLLER_Frame_t : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ARCONTROLLER_Frame_t(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ARCONTROLLER_Frame_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ARCONTROLLER_Frame_t() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ARDroneSDK3PINVOKE.delete_ARCONTROLLER_Frame_t(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public System.IntPtr data {
    set {
      ARDroneSDK3PINVOKE.ARCONTROLLER_Frame_t_data_set(swigCPtr, new global::System.Runtime.InteropServices.HandleRef(null, value));
    } get{System.IntPtr res = ARDroneSDK3PINVOKE.ARCONTROLLER_Frame_t_data_get(swigCPtr); ; return res;}
  }

  public uint capacity {
    set {
      ARDroneSDK3PINVOKE.ARCONTROLLER_Frame_t_capacity_set(swigCPtr, value);
    } 
    get {
      uint ret = ARDroneSDK3PINVOKE.ARCONTROLLER_Frame_t_capacity_get(swigCPtr);
      return ret;
    } 
  }

  public uint used {
    set {
      ARDroneSDK3PINVOKE.ARCONTROLLER_Frame_t_used_set(swigCPtr, value);
    } 
    get {
      uint ret = ARDroneSDK3PINVOKE.ARCONTROLLER_Frame_t_used_get(swigCPtr);
      return ret;
    } 
  }

  public uint missed {
    set {
      ARDroneSDK3PINVOKE.ARCONTROLLER_Frame_t_missed_set(swigCPtr, value);
    } 
    get {
      uint ret = ARDroneSDK3PINVOKE.ARCONTROLLER_Frame_t_missed_get(swigCPtr);
      return ret;
    } 
  }

  public uint width {
    set {
      ARDroneSDK3PINVOKE.ARCONTROLLER_Frame_t_width_set(swigCPtr, value);
    } 
    get {
      uint ret = ARDroneSDK3PINVOKE.ARCONTROLLER_Frame_t_width_get(swigCPtr);
      return ret;
    } 
  }

  public uint height {
    set {
      ARDroneSDK3PINVOKE.ARCONTROLLER_Frame_t_height_set(swigCPtr, value);
    } 
    get {
      uint ret = ARDroneSDK3PINVOKE.ARCONTROLLER_Frame_t_height_get(swigCPtr);
      return ret;
    } 
  }

  public int isIFrame {
    set {
      ARDroneSDK3PINVOKE.ARCONTROLLER_Frame_t_isIFrame_set(swigCPtr, value);
    } 
    get {
      int ret = ARDroneSDK3PINVOKE.ARCONTROLLER_Frame_t_isIFrame_get(swigCPtr);
      return ret;
    } 
  }

  public int available {
    set {
      ARDroneSDK3PINVOKE.ARCONTROLLER_Frame_t_available_set(swigCPtr, value);
    } 
    get {
      int ret = ARDroneSDK3PINVOKE.ARCONTROLLER_Frame_t_available_get(swigCPtr);
      return ret;
    } 
  }

  public ARCONTROLLER_Frame_t() : this(ARDroneSDK3PINVOKE.new_ARCONTROLLER_Frame_t(), true) {
  }

}
